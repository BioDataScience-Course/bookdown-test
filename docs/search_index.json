[
["visu3.html", "Module 4 Visualisation III", " Module 4 Visualisation III Objectifs Savoir réaliser différents graphiques comme le graphique en barre, le graphique en camembert ou encore la boite de dispersion, dans R avec la fonction chart() Arranger différents graphiques dans une figure unique. Découvrir différents systèmes graphiques (graphiques de base, lattice, ggplot2) et comparaison avec chart() Prérequis Si ce n’est déjà fait, vous devez avoir réaliser les module 2 &amp; 3. "],
["graphique-en-barre.html", "4.1 Graphique en barre", " 4.1 Graphique en barre 4.1.1 Dénombrement d’observations par facteur Vous souhaitez représenter une dénombrement des différentes niveaux d’une variables facteur. On peux l’exprimer dans R sous la forme : \\[\\sim variable \\ facteur\\] que l’on peut lire : \\[\\ en \\ fonction \\ de \\ la \\ variable \\ facteur\\] Figure 4.1: Points essentiels d’un graphique en barre montrant le dénombrement des niveaux d’une variable facteur. Les éléments indispensables à la compréhension d’un graphique en barre sont (ici mis en évidence en couleur) : les axes avec les graduations (en rouge) le label en x (en bleu) les niveaux de la variable facteur Les instructions de base afin de produire un graphique en barre sont : chart(e_m, formula = ~ e_mathaei) + geom_bar() Figure 4.2: Instructions pour obtenir un graphique en barres. La fonction chart() requiert comme argument le jeu de données (dataframe, e_m), ainsi que la formule à employer ~factor(VAR). Pour réaliser un graphique en barre, vous devez utiliser ensuite la fonction geom_bar(). 4.1.1.1 Dénombrement d’observations par plusieurs facteurs Différentes représentations sont possibles pour observer des dénombrements tenant compte de plusieurs variables facteurs. Par défaut, l’argument position a pour valeur stack. chart(diamonds, formula = ~ cut %fill=% clarity) + geom_bar() Figure 4.3: Dénombrement de l’occurence en fonction de la variable facteur cut et de la variable clarity du jeu de données diamonds. Il existe d’autres solutions en utilisant la valeur dodge ou fill pour l’argument position. b &lt;- chart(diamonds, formula = ~ cut %fill=% clarity) + geom_bar( position = &quot;dodge&quot;) c &lt;- chart(diamonds, formula = ~ cut %fill=% clarity) + geom_bar( position = &quot;fill&quot;) ggarrange(b, c, common.legend = TRUE, labels = &quot;auto&quot;) Figure 4.4: A) Graphique en barres (variable facteur cut et variable clarity avec position = &quot;dodge&quot;. B) Idem avec position = &quot;fill&quot; 4.1.1.2 Pièges et Astuces L’oeil humain perçoit plus distinctement les différences de tailles horizontales que verticales. Avec la fonction coord_flip() ajouté à votre graphique, vous pouvez effectuer une rotation des axes. chart(e_m, formula = ~ e_mathaei ) + geom_bar() + coord_flip() Figure 4.5: Graphique en barre du dénombrement de quatre variétés d’oursins. 4.1.1.3 Pour en savoir plus http://www.sthda.com/french/wiki/ggplot2-barplots-guide-de-demarrage-rapide-logiciel-r-et-visualisation-de-donnees http://ggplot2.tidyverse.org/reference/geom_bar.html http://ggplot.yhathq.com/docs/geom_bar.html 4.1.2 Valeur moyenne à l’aide d’un graphe en barre Le graphique en barres peut être employé afin de résumer des données numériques via la moyenne. Il ne s’agit plus de dénombrer les occurences d’une variable facteur mais de résumer des données numériques en fonction d’une variable facteur. On peut exprimer cette relation dans R sous la forme de \\[y \\sim x\\] que l’on peut lire : \\[y \\ en \\ fonction \\ de \\ x\\] ou encore \\[Variable \\ numérique \\ en \\ fonction \\ de \\ Variable \\ facteur\\] Considérez l’échantillon suivant : 1, 71, 55, 68, 78, 60, 83, 120, 82 ,53, 26 Calculez la moyenne sur base de la formule de la moyenne \\[\\overline{y} = \\sum_{i = 1}^n \\frac{y_i}{n}\\] # Création du vecteur x &lt;- c(1, 71, 55, 68, 78, 60, 83, 120, 82, 53, 26) # Calcul de la moyenne mean(x) # [1] 63.36364 En partant d’un jeu de données, comme celui ci dessous : Tableau 4.1: Tableau de données relatif à la croissance de dents de cochons d’Inde len supp dose 4.2 VC 0.5 22.5 VC 1.0 29.5 VC 2.0 15.2 OJ 0.5 20.0 OJ 1.0 23.0 OJ 2.0 Vous pouvez observez que ce jeu de données comprend trois variables avec une première variable portant sur le longueur des dents de cochons d’Inde, une seconde variable portant sur la supplémentation administrée ( VC, vitamine Cou OJ, jus d’orange) à ces derniers et enfin une troisième variable portant sur la dose administrée (0.5, 1, 2). Figure 4.6: Points essentiels d’un graphique en barre résumant les données numériques d’une variable facteur. Les éléments indispensables à la compréhension d’un graphe en barre sont (ici mis en évidence en couleur) : les axes avec les graduations (en rouge) les labels et unités des axes (en bleu) Les instructions de base afin de produire ce graphe en barre sont : # Importation des données tg &lt;- read(&quot;ToothGrowth&quot;, package = &quot;datasets&quot;) # Réalisation du graphique chart(tg, formula = len ~ supp) + stat_summary(geom = &quot;bar&quot;, fun.y = &quot;mean&quot;) Figure 4.7: Instructions pour obtenir un graphique en barre indiquant les moyennes par groupe. 4.1.2.1 Pièges et astuces 4.1.2.1.1 Moyenne et des barres d’erreurs chart(tg, formula = len ~ supp) + stat_summary(geom = &quot;bar&quot;, fun.y = &quot;mean&quot;) + stat_summary(geom = &quot;errorbar&quot;, fun.ymax = &quot;mean_sd&quot;) # Warning: Computation failed in `stat_summary()`: # impossible de trouver la fonction &quot;mean_sd&quot; 4.1.2.1.2 Moyenne Le graphe en barre est un graphique très répandu dans le domaine scientifique malgré le grand nombre d’arguments contre lui que vous pouvez lire dans la section Pour en savoir plus. L’un des arguments le plus important est la faible information qu’il apporte. a &lt;- chart(ToothGrowth, formula = len ~ supp) + stat_summary(geom = &quot;bar&quot;, fun.y = &quot;mean&quot;) b &lt;- chart(ToothGrowth, formula = len ~ supp) + stat_summary(geom = &quot;point&quot;, fun.y = &quot;mean&quot;) ggarrange(a,b, labels = &quot;AUTO&quot;) Figure 4.8: moyenne de la croissance des dents de cochons d’inde en fonction du supplément admnistré (jus d’orange ou vitamine C. 4.1.2.2 Pour en savoir plus https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3148365/ https://www.r-bloggers.com/dynamite-plots-in-r/ https://pablomarin-garcia.blogspot.com/2010/02/why-dynamite-plots-are-bad.html http://biostat.mc.vanderbilt.edu/wiki/pub/Main/TatsukiRcode/Poster3.pdf http://emdbolker.wikidot.com/blog%3Adynamite "],
["graphique-en-camembert.html", "4.2 Graphique en camembert", " 4.2 Graphique en camembert Le graphique en camembert va vous permettre de visualiser un dénombrement d’observations par facteur, tout comme le graphique en barre. chart(e_m, formula = ~ factor(0) %fill=% e_mathaei) + geom_bar(width = 1) + coord_polar(&quot;y&quot;, start = 0) + theme_void() + scale_fill_viridis(discrete = TRUE) Figure 4.9: Points essentiels d’un graphique en camembert montrant le dénombrement des niveaux d’une variable facteur. Les éléments indispensables à la compréhension d’un graphe en camembert sont : les niveaux de la variable facteur Les instructions de base afin de produire ce graphe en camembert sont : chart(e_m, formula = ~ factor(0) %fill=% e_mathaei) + geom_bar(width = 1) + coord_polar(&quot;y&quot;, start = 0)+ labs( x = &quot;&quot;, y = &quot;&quot;) + theme_void() + scale_fill_viridis(discrete = TRUE) Figure 4.10: Instructions 4.2.1 Pièges et astuces Le graphique en camembert est un graphique également fortement répandu. Cependant, l’oeil humain perçoit avec plus de précision les différences de formes que les différences d’angles. Un grand nombre de niveaux dans une variable facteur va avoir pour effet de remplir. De ce fait, il est donc déconseillé d’employer le graphique en camembert Partons d’un exemple fictif, combien d’observations pour la lettre h comptez vous ? fact &lt;- c(rep(x = &quot;a&quot;, times = 10), rep(x = &quot;b&quot;, times = 1), rep(x = &quot;c&quot;, times = 1), rep(x = &quot;d&quot;, times = 50), rep(x = &quot;e&quot;, times = 2), rep(x = &quot;f&quot;, times = 78), rep(x = &quot;g&quot;, times = 101), rep(x = &quot;h&quot;, times = 25) , rep(x = &quot;i&quot;, times = 31), rep(x = &quot;j&quot;, times = 49)) error &lt;- data_frame(fact = fact) chart(error, formula = ~ factor(1) %fill=% fact) + geom_bar(width = 1) + coord_polar(&quot;y&quot;, start = 0) + labs( x = &quot;&quot;, y = &quot;&quot;) + scale_fill_viridis(discrete = TRUE) Figure 4.11: Piège d’un graphique en camembert montrant le dénombrement des niveaux d’une variable facteur. Sur base de ce graphique en barre, combien d’observations pour la lettre h comptez vous ? chart(error, formula = ~ factor(fact) %fill=% fact) + geom_bar(width = 1) + scale_fill_viridis(discrete = TRUE) Figure 4.12: Piège d’un graphique en barre montrant le dénombrement des niveaux d’une variable facteur. 4.2.2 Pour en savoir plus http://www.sthda.com/french/wiki/ggplot2-graphique-en-camembert-guide-de-demarrage-rapide-logiciel-r-et-visualisation-de-donnees https://dataparkblog.wordpress.com/2017/09/24/diagramme-en-camembert-avec-r-et-ggplot/ https://www.displayr.com/why-pie-charts-are-better-than-bar-charts/ http://www.perceptualedge.com/articles/08-21-07.pdf "],
["boite-de-dispersion.html", "4.3 Boite de dispersion", " 4.3 Boite de dispersion Vous souhaitez représenter graphiquement cette fois un résumé d’une variable numérique tout en gardant un maximum d’information. La boite de dispersion est l’un des outils pouvant vous apporter la solution. Cette dernière va représenter graphiquement 5 descripteurs appelés les 5 nombres. Prenez les chiffres suivants : 1, 71, 55, 68, 78, 60, 83, 120, 82 ,53, 26 ordonnez les de manière croissante # création du vecteur x &lt;- c(1, 71, 55, 68, 78, 60, 83, 120, 82, 53, 26) # ordonner le vecteur sort(x) # [1] 1 26 53 55 60 68 71 78 82 83 120 Le premier descripteur des 5 nombres est la médiane qui se situe à la moitié des observations. median(x) # [1] 68 Le premier quartile sera la valeur au milieu des 50% des données inférieurs à la médiane et le troisième quartile est la valeur centrale sur les 50% des données supérieurs à la médiane. La valeur manimale étant la valeur la plus petite et la valeurs maximale étant la valeur la plus élevée. fivenum(x) # [1] 1 54 68 80 120 Vous pouvez réprésenter ce vecteur via une boite de dispersion Figure 4.13: Nuage de points montrant la première étape de la construction d’une boite de dispersion. La boite de dispersion représente donc les 5 nombres. Vous observez cependant que certaine valeur ne se situe pas dans la boite de dispersion, il s’agit de valeurs extrêmes. Elles sont considérées comme extrêmes car elles sont éloignées de plus 1.5 fois l’espace inter-quartile (Q3- Q1). La boite de dispersion s’arrete donc aux dernières valeurs présente dans cet espace inter-quartile (IQR). Figure 4.14: A) Nuage de points montrant la construction d’une boite de dispersion avec les 5 nombres représentés par des lignes noires. B) Boite de dispersion obtenue par rapport à la partie A. La boite de dispersion ainsi que sa description sont proposée sur le graphique ci-dessous. Figure 4.15: Points essentiels d’une boite de dispersion et sa description. Les instructions de base afin de produire une boite de dispersion sont : # Importation des données tg &lt;- read(&quot;ToothGrowth&quot;, package = &quot;datasets&quot;) # Réalisation du graphique chart(tg, formula = len ~ supp) + geom_boxplot() Figure 4.16: Instructions pour obtenir une boite de dispersion. La fonction chart() requiert comme argument le jeu de donnée (dataframe, tg), ainsi que la formule à employer YNUM (len) ~ XFACTOR (supp). Pour réaliser une boite de dispersion vous devez ajouter la seconde fonction geom_boxplot(). 4.3.1 Pièges et Astuces 4.3.1.1 Nombre d’observations par boite de disperion Lors de la réalisation de boites de dispersion, vous devez être vigilant au nombre d’observation qui se cache sous chaque boite de dispersion. En effet, une boite de dispersion ne comportant que 5 valeurs ou moins n’a que peut d’intérêt d’être avec cet outils graphique. Figure 4.17: Piège des boites de dispersion. La boite de dispersion “a” ne contient que 4 observations ce qui peut être totalement masqué par l’utilisation de boite de dispersion. Une des solutions permettant de connaitre graphiquement la nombre d’observations par boite est de l’ajouter au dessus de chaque boite avec la fonction give_n() give_n &lt;- function(x){ return(c(y = max(x)*1.20, label = length(x))) } chart(formula = len ~ supp, data = tg) + geom_boxplot() + stat_summary(fun.data = give_n, geom = &quot;text&quot;, hjust = 0.5) Figure 4.18: Boite de dispersion portant sur la croissance de dents de cochon d’Inde en fonction de la supplémentation administrée. chart(formula = len ~ supp %fill=% as.ordered(dose), data = tg) + geom_boxplot() + stat_summary(fun.data = give_n, geom = &quot;text&quot;, hjust = 0.5, position = position_dodge(0.75)) Figure 4.19: Boite de dispersion portant sur la croissance de dents de cochon d’Inde en fonction de la supplémentation et la dose administrée. 4.3.2 Pour en savoir plus ! http://www.sthda.com/french/wiki/ggplot2-box-plot-guide-de-demarrage-rapide-logiciel-r-et-visualisation-de-donnees https://plot.ly/ggplot2/box-plots/ http://www.r-graph-gallery.com/265-grouped-boxplot-with-ggplot2/ https://chemicalstatistician.wordpress.com/2013/08/12/exploratory-data-analysis-the-5-number-summary-two-different-methods-in-r-2/ "],
["multi-graphiques.html", "4.4 Multi-graphiques", " 4.4 Multi-graphiques Lorsque vous souhaitez représenter plusieurs graphiques sur une seule fenêtre graphique plusieurs fonctions sont à votre disposition. Il faut tout d’abord distinguer deux types de multi-graphiques. Soit il s’agit d’un seul graphique que vous souhaitez subdiviser par rapport à une ou deux variables facteurs. Soit il s’agit de graphiques indépendants que vous souhaitez représenter sur le même fenêtre graphique. Dans le premier cas, la fonction facet_grid() du package ggplot2 peut être employé. Dans le second cas, la fonction plot_grid() du package cowplot est l’une des alternatives possibles. 4.4.1 Facets L’une des règles les plus importantes que vous devez impérativement garder à l’eprit lors de la réalisation de vos graphiques est la simplicité. Plus votre graphique va contenir d’information au plus il sera compliqué à décoder par un collaborateur. # Importation des données ChickWeight &lt;- read(file = &quot;ChickWeight&quot;, package = &quot;datasets&quot;, lang = &quot;fr&quot;) # Réalisation du graphique chart(ChickWeight, formula = weight ~ Time) + geom_point(alpha = 0.3) Figure 4.20: Nuage de point montrant la variation de la masse de poulets au cours du temps. Le graphique ci-dessus peut par exemple être simplifié avec les facets. L’information que l’on souhaite partager est la même mais les choix graphiques rendent sa lecture plus aisée. De plus, la fentre graphique a la même taille par défault que pour un seul graphique. De ce fait, réaliser de multiples graphiques peut rendre sa lecture impossible par une taille trop faible. chart(ChickWeight, formula = weight ~ Time | Diet ) + geom_point(alpha = 0.3) Figure 4.21: Nuage de point montrant la variation de la masse de poulets au cours du temps en fonction de la supplémention (1-4). Vous observez que les échelles en abscisse et en ordonnée sont similaires. Cela permet une meilleure comparaison. 4.4.2 ggarrange() La fonctions ggarrange() du package ggpubr permet de combiner plusieurs graphiques. # Importation des données ub &lt;- read(&quot;urchin_bio&quot;, package = &quot;data.io&quot;) # Réalisation des graphiques a &lt;- chart(urchin, formula = weight ~ height %col=% origin) + geom_point() b &lt;- chart(urchin, formula = weight ~ solid_parts %col=% origin) + geom_point() # Combinaison des graphiques ggpubr::ggarrange(a, b, common.legend = TRUE, legend = &quot;bottom&quot;, align = &quot;v&quot;) Figure 4.22: A) Nuage de point montrant la variation de la masse d’oursins en fonction de la taille et de leur origine. B) Nuage de point montrant la variation de la masse d’oursins en fonction de la masse des parties solides et de leur origine. Il existe d’autres fonctions permettant de combiner plusieurs graphiquescomme plot_grid() du packagecowplot. 4.4.2.1 Pour en savoir plus ! http://www.sthda.com/french/wiki/ggplot2-facet-diviser-un-graphique-en-plusieurs-panneaux-logiciel-r-et-visualisation-de-donnees http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/ http://lightonphiri.org/blog/ggplot2-multiple-plots-in-one-graph-using-gridextra https://cran.r-project.org/web/packages/cowplot/vignettes/plot_grid.html http://www.sthda.com/english/rpkgs/ggpubr/reference/ggarrange.html "],
["differents-systemes-graphiques.html", "4.5 Différents systèmes graphiques", " 4.5 Différents systèmes graphiques Depuis le début, l’ensemble des graphiques que nous vous avons proposé utilise la fonction chart() du package chart. Cependant, il ne s’agit pas du seul outil permettant de réaliser des graphiques dans R. # Importation des données ub &lt;- read(&quot;urchin_bio&quot;, package = &quot;data.io&quot;) # Réalisation du graphique chart(ub,formula = height ~ weight %col=% origin) + geom_point() + labs( x = &quot;Poids [g]&quot;, y = &quot;Taille [mm]&quot;) Figure 4.23: Nuage de point montrant la variation de la taille en fonction du poids d’oursins et de leur origine avec le système graphique chart(). Voici d’autres alternatives que sont R de base plot(urchin$weight, urchin$height, col = urchin$origin, ylab = &quot;Taille [mm]&quot;, xlab = &quot;Poids immergé [g]&quot;) legend(x = 80, y = 10, legend = c(&quot;Farm&quot;, &quot;Fishery&quot;), col = c(&quot;Black&quot;, &quot;Red&quot;), pch = 1) Figure 4.24: Nuage de point montrant la variation de la taille en fonction du poids d’oursins et de leur origine avec le système graphique r de base. lattice theme_sciviews_lattice() xyplot( height ~ weight, data = urchin, groups = origin, ylab = &quot;Taille [mm]&quot;, xlab = &quot;Poids immergé [g]&quot;, auto.key = TRUE) Figure 4.25: Nuage de point montrant la variation de la taille en fonction du poids d’oursins et de leur origine avec le système graphique lattice. ggplot2 ggplot(data = urchin) + geom_point(mapping = aes(x = weight, y = height, color = origin)) + labs( x = &quot;Poids immergé [g]&quot;, y = &quot;Taille [mm]&quot;) Figure 4.26: Nuage de point montrant la variation de la taille en fonction du poids d’oursins et de leur origine avec le système graphique ggplot2. Vous observez rapidement certaines similitudes entre chart, ggplot2 et lattice. En effet, la package chart a pour but premier de combiner les meilleures outils présents dans chacun des modes graphiques présentés ci-dessus. 4.5.1 Pour en savoir plus http://r4ds.had.co.nz/data-visualisation.html https://flowingdata.com/2016/03/22/comparing-ggplot2-and-r-base-graphics/ https://learnr.wordpress.com/2009/08/26/ggplot2-version-of-figures-in-lattice-multivariate-data-visualization-with-r-final-part/ https://www.statmethods.net/advgraphs/trellis.html https://www.r-bloggers.com/conditioning-and-grouping-with-lattice-graphics/ http://bl.ocks.org/patilv/raw/7360425/ http://www.sthda.com/english/wiki/scatter-plots-r-base-graphs "],
["a-vous-de-jouer-7.html", "4.6 A vous de jouer !", " 4.6 A vous de jouer ! Etudiez le tutoriel suivant : BioDataScience::run(&quot;...&quot;) "]
]
