[
["visu2.html", "Module 3 Visualisation II", " Module 3 Visualisation II Vos objectifs pour ce module sont: Savoir réaliser différentes variantes de différents graphiques tel que les histogrammes, les graphes de densité dans R avec la fonction chart() Intégrer ensuite des graphiques dans un rapport et y décrire ce que que vous observez Si ce n’est déjà fait, vous devez avoir réaliser le module précédent. "],
["visualisation-graphique-a-laide-dun-histogramme.html", "3.1 Visualisation graphique à l’aide d’un histogramme", " 3.1 Visualisation graphique à l’aide d’un histogramme Lors d’une expérience vous souhaitez visualiser la façon dont vos données s’étale sur un axe (On parle de distribution1 en statistique) pour l’une des vairables étudiées. L’histogramme est l’un des outils pouvant vous apporter cette information. Ce graphique va découper en plusieurs classes2 la variable étudiée. Figure 3.1: Histogramme montrant la distribution de la taille d’un échantillon de zooplancton analysé par analyse d’image. Les éléments indispensables à la compréhension d’un histogramme sont (ici mis en évidence en couleur) Les axes avec les graduations (en rouge) les labels et unité des axes (en bleu) Les instructions de base afin de produire un histogramme : # Importation du jeu de données zp &lt;- read( file = &quot;zooplankton&quot;, package = &quot;data.io&quot;, lang = &quot;fr&quot;) # Réalisation du graphique chart(zp, formula = ~ size) + geom_histogram(bins = 50) Figure 3.2: Instructions pour obtenir un histogramme. # bins permet de préciser le nombre de classes souhaitées La fonction chart() requiert comme argument le jeu de donnée (dataframe, zp), ainsi que la formule à employer ~ VAR (size) . Pour réaliser un histogramme, vous devez ajouter la seconde fonction geom_histogram(). Vous pouvez décripter votre histogramme sur base des modes3 et de la symétrie4 de ces derniers. Les modes les plus fréquents sont unimodal, bimodal ou multimodal. Figure 3.3: Histogrammes montrant les modes et symétries : A. histogramme unimodal et symétrique, B. histogramme bimodal et asymétrique, C. histogramme unimodal et asymétrique, D. histogramme multimodal et symétrique. 3.1.1 Pièges et astuces 3.1.1.1 Nombres de classes d’un histogramme Vous devez être particulièrement vigilant lors de la réalisation d’un histogramme aux classes de ce dernier. # Réalisation du graphique précédent a &lt;- chart(zp, formula = ~ size) + geom_histogram(bins = 50) # modification du nombre de classes b &lt;- chart(zp, formula = ~ size) + geom_histogram(bins = 20) c &lt;- chart(zp, formula = ~ size) + geom_histogram(bins = 10) d &lt;- chart(zp, formula = ~ size) + geom_histogram(bins = 5) # Assemblage des graphiques ggpubr::ggarrange(a,b,c,d,labels = &quot;AUTO&quot;, font.label = list(size = 14, align = &quot;hv&quot;)) Figure 3.4: Piège de l’histogramme. A. histogramme initiale montrant la répartition des tailles au sein d’organismes planctoniques. B., C., D. Histogramme A en modifiant le nombres de classes 3.1.1.2 Utilisation des snippets RStudio permet d’ajouter des snippets5 afin de faciliter l’apprentissage des suites d’instruction pour analyser des données sur R. Sciviews fournit une succession de snippets que vous pouvez retrouver dans l’aide mémoire6 ... # ouverture des sciviews snippets 3.1.1.3 Réalisation d’un histogramme par facteur Lors de l’analyse de jeux de données , vous serez amené a réalisé un histogramme par facteur. Cette opération peut avoir un rendu graphique plutôt décevant dont voici deux astuces pour l’éviter. # Importation du jeu de données is &lt;- read(file = &quot;iris&quot;, package = &quot;datasets&quot;, lang = &quot;fr&quot;) # Réalisation de l&#39;histogramme par facteur chart(is, ~ sepal_length %fill=% species) + geom_histogram() + scale_fill_viridis(discrete = TRUE) # palette de couleur harmonieuse # `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 3.5: Histogramme de la longueur des sépales de 3 espèces d’iris. La premières astuces est d’employer préférentiellement les facets au lieu de l’argument fill. chart(is, ~ sepal_length | species) + geom_histogram() # `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 3.6: Histogramme de la longueur des sépales de 3 espèces d’iris en employant les facets comme argument pour discriminer les espèces. Simon Jackson propose une seconde solution combinant les facets et l’argument fill. Il faut ensuite ajouter par derriere un histogramme ne tenant pas compte de la variable facteur comme proposé ci-dessous. chart(is, formula = ~ sepal_width %fill=% species | species) + geom_histogram(data = is[ , -c(5)] , fill = &quot;grey&quot;) + geom_histogram(show.legend = FALSE) + scale_fill_viridis(discrete = TRUE) # `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 3.7: Histogramme de la longeur des sépales de 3 espèces d’iris en employant la solution de Simon Jackson. TODO↩ TODO↩ todo↩ TODO↩ Suite d’instruction préenregistré dasn Rstudio servant d’aide lors de l’analyse de données.↩ TODO↩ "],
["visualisation-graphique-a-laide-dun-graphique-de-densite.html", "3.2 Visualisation graphique à l’aide d’un graphique de densité", " 3.2 Visualisation graphique à l’aide d’un graphique de densité L’histogramme n’est pas le seul outil à votre disposition. Vous pouvez également employer le graphique de densité qui se base sur l’histogramme. Il ne s’agit plus de représenter un dénombrement comme l’histogramme le fait mais une probabilité7 d’obtenir une valeur parmi un échantillon aléatoire. Le passage d’un histogramme vers un graphe de densité se base sur une estimation par noyaux gaussien8 Figure 3.8: A. Histogramme et B. graphique de densité montrant la distribution de la taille d’un échantillon de zooplancton analysé par analyse d’image. Les éléments indispensables à la compréhension d’un graphique de densité sont (ici mis en évidence en couleur) : Les axes avec les graduations (en rouge) les labels et unité des axes (en bleu) Les instructions de base afin de produire un histogramme sont : # Importation du jeu de données zp &lt;- read( file = &quot;zooplankton&quot;, package = &quot;data.io&quot;, lang = &quot;fr&quot;) # Réalisation du graphique chart(zp, formula = ~ size) + geom_density() Figure 3.9: Instructions pour obtenir un graphique de densité. La fonction chart() requiert comme argument le jeu de donnée ( dataframe, zp), ainsi que la formule à employer ~ VAR (size). Pour réaliser un graphique de densité vous devez ajouter la seconde fonction geom_density(). TODO↩ TODO↩ "],
["visualisation-graphique-a-laide-dun-diagramme-en-violon.html", "3.3 Visualisation graphique à l’aide d’un diagramme en violon", " 3.3 Visualisation graphique à l’aide d’un diagramme en violon Le graphique de densité peut être représenté via un autre graphique qui sera d’autant plus intéressant que la variable facteur étudiée peut être discriminée par un grand nombre de niveaux différents. Il s’agit également d’une estimation se basant sur un histogramme via la méthode l’estimation par noyau gaussien. Figure 3.10: Ponts essentiels d’un diagramme en violon portant sur la distribution de la taille d’un échantillon de zooplancton en fonction de leurs classes analysé par analyse d’image. Les instructions de base afin de produire un diagramme en violon sont : # Importation du jeu de données zp &lt;- read( file = &quot;zooplankton&quot;, package = &quot;data.io&quot;, lang = &quot;fr&quot;) # Réduction du jeu de données zp1 &lt;- filter(zp, class %in% c(&quot;Annelid&quot;, &quot;Calanoid&quot;, &quot;Cyclopoid&quot;, &quot;Decapod&quot;)) # Réalisation du graphique chart(zp1, formula = size~ class) + geom_violin() Figure 3.11: Instructions pour obtenir un diagramme en violon. La fonction chart() requiert comme argument le jeu de donnée (dataframe, zp), ainsi que la formule à employer YVAR (size) ~ XVAR (class). Pour réaliser un graphique de densité vous devez ajouter la seconde fonction geom_density(). 3.3.1 Pièges et astuces Lors de l’analyse de jeux de données , vous serez amené a réalisé un diagramme en violon pour une variable comprennant un grand nombre de niveaux. Cette opération peut avoir un rendu graphique plutôt décevant dont voici deux astuces pour l’éviter. chart(zp, formula = size~ class) + geom_violin() Figure 3.12: Diagramme en violon montrant la densité de tailles des 17 classes d’organismes planctonique. L’ensemble des niveaux de la variable class se chevauche. La fonction coord_flip() peut améliorer le rendu du graphique en le faisant basculer de 90°. chart(zp, formula = size~ class) + geom_violin() + coord_flip() Figure 3.13: Diagramme en violon montrant la densité de tailles des 17 classes d’organismes planctonique avec l’ajout de la fonction coord_flip. Le package ggridges propose une seconde solution basée sur le principe de graphique de densité avec la fonction geom_density_ridges()`. # Importation du packages library(ggridges) # réalisation du graphiques chart(zp, class ~ size) + geom_density_ridges() Figure 3.14: Diagramme en violon montrant la densité de tailles des 17 classes d’organismes planctonique avec la fonction geom_density_ridges. "],
["a-vous-de-jouer-3.html", "3.4 A vous de jouer !", " 3.4 A vous de jouer ! Lancez votre machine virtuelle, ouvrez Rstudio puis lancez l’instruction suivante BioDataScience::run(&quot;...&quot;) (package en cours de développement sur github). Un squelette de projet RStudio vous a été fournit dans un dépôt Github Classroom, y compris organisation des fichiers et jeux de données types. Votre objectif est de comprendre les données proposées, en utilisant des visualisations graphiques appropriées et en documentant le fruit de votre étude dans un rapport R Notebook. Utilisez le l’histogramme et le graphique de densité graphique que vous venez d’étudier bien sûr, mais vous êtes aussi encouragés à expérimenter d’autres visualisations graphiques. "]
]
