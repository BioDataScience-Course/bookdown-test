[
["qualit.html", "Module 6 Traitement des données II", " Module 6 Traitement des données II Objectifs Comprendre les principaux tableaux de données utilisés en science des données Savoir réaliser des tableaux de contingences Acquérir des données et les encoder correctement et de manière à ce que les analyses soient reproductibles Etre capable de remanier des tableaux de données et de fusionner plusieurs tableaux Prérequis Ce module est la continuation du module 5 dont le contenu doit être bien compris et maîtrisé avant de poursuivre ici. "],
["tableaux-de-donnees.html", "6.1 Tableaux de données", " 6.1 Tableaux de données Les tableaux de données sont principalement représentés sous deux formes : les tableaux cas par variables et les tableaux de contingence. 6.1.1 Tableaux cas par variables Chaque individus est représenté en ligne et chaque variable en colonne par convention. En anglais, on parlera de tidy data. Nous nous efforcerons de toujours créer un tableau de ce type pour les données brutes. La question à se poser est la suivante : est-ce que j’ai un seul et même individu représenté sur chaque ligne du tableau ? Si la réponse est non, le tableau de données n’est pas correctement encodé. TODO : exemple et solution Les tableaux de données que vous avez traités jusqu’à présent étaient tous des tableaux cas par variables. Chaque ligne représentait un individu sur qui une ou plusieurs variables (en colonnes) étaient mesurées. biometry &lt;- read(&quot;biometry&quot;, package = &quot;BioDataScience&quot;, lang = &quot;fr&quot;) head(biometry) # # A tibble: 6 x 7 # gender day_birth weight height wrist year_measure age # &lt;fct&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; # 1 M 1995-03-11 69 182 15 2013 18 # 2 M 1998-04-03 74 190 16 2013 15 # 3 M 1967-04-04 83 185 17.5 2013 46 # 4 M 1994-02-10 60 175 15 2013 19 # 5 W 1990-12-02 48 167 14 2013 23 # 6 W 1994-07-15 52 179 14 2013 19 L’encodage d’un petit tableau cas par variables directement dans R est facile. Cela peut se faire de plusieurs façons différentes. En voici deux utilisant les fonctions tibble() (spécification colonne par colonne, utilisez le snippet .dmtibble pour vous aider) et tribble() (spécification ligne par ligne, utilisez le snippet .dmtribble) : # Spécification colonne par colonne avec tibble() (DF &lt;- as_dataframe(tibble( x = c(1, 2), y = c(3, 4) ))) # # A tibble: 2 x 2 # x y # &lt;dbl&gt; &lt;dbl&gt; # 1 1 3 # 2 2 4 # Spécification ligne par ligne avec tribble() (DF1 &lt;- as_dataframe(tribble( ~x, ~y, 1, 3, 2, 4 ))) # # A tibble: 2 x 2 # x y # &lt;dbl&gt; &lt;dbl&gt; # 1 1 3 # 2 2 4 La seconde approche est plus naturelle, mais la première permet d’utiliser diverses fonctions de R pour faciliter l’encodage, par exemple : Séquence d’entiers successifs : 1:10 # [1] 1 2 3 4 5 6 7 8 9 10 Répétition d’un vecteur 5 fois : rep(c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), 5) # [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;a&quot; &quot;b&quot; &quot;c&quot; Répétition de chaque item d’un vecteur 5 fois : rep(c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), each = 5) # [1] &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;b&quot; &quot;b&quot; &quot;b&quot; &quot;b&quot; &quot;b&quot; &quot;c&quot; &quot;c&quot; &quot;c&quot; &quot;c&quot; &quot;c&quot; Pour de plus gros tableaux, il vaut mieux utiliser un tableur tel que Excel ou LibreOffice Calc pour l’encodage. Les tableurs en ligne comme Google Sheets ou Excel Online conviennent très bien également et facilitent un travail collaboratif ainsi que la mise à disposition sut le Net, comme nous avons vu au module 5. 6.1.2 Tableaux de contingence C’est le dénombrement de l’occurence de chaque niveau d’une (tableau à une entrée) ou de deux variables qualitatives (tableau à double entrée). La fonction table() crée ces deux types de tableaux de contingence à partir de données encodées en tableau cas par variables : biometry$age_rec &lt;- cut(biometry$age, include.lowest = FALSE, right = TRUE, breaks = c(14, 27, 90)) (bio_tab &lt;- table(biometry$gender, biometry$age_rec)) # # (14,27] (27,90] # M 106 92 # W 97 100 Le tableau de contingence peut toujours être calculé à partir d’un tableau cas par variable, mais il peut également être encodé directement si nécessaire. Voic un petit tableau de contingence à simple entrée encodé directement comme tel (vecteur nommé transformé en objet table à l’aide de la fonction as.table()) : anthirrhinum &lt;- as.table(c( &quot;fleur rouge&quot; = 54, &quot;fleur rose&quot; = 122, &quot;fleur blanche&quot; = 58) ) anthirrhinum # fleur rouge fleur rose fleur blanche # 54 122 58 Une troisième possibilité est d’utiliser un tableau indiquant les fréquences d’occurence dans une colonne (freq ci-dessus). Ce n’est pas un tableau cas par variable, mais une forme bien plus concise et pratique pour préencoder les données qui devront être ensuite transformées en tableau de contingence à l’aide de la fonction xtabs(). Voici un exemple pour un tableau de contingence à double entrée. Notez que le tableau cas par variable correspondant devrait contenir 44 + 116 + 19 + 128 = 307 lignes et serait plus fastidieux à construire et à manipuler (même en utilisant la fonction rep()). timolol &lt;- tibble( traitement = c(&quot;timolol&quot;, &quot;timolol&quot;, &quot;placebo&quot;, &quot;placebo&quot;), patient = c(&quot;sain&quot;, &quot;malade&quot;, &quot;sain&quot;, &quot;malade&quot;), freq = c(44, 116, 19, 128) ) # Creation du tableau de contingence timolol_table &lt;- xtabs(data = timolol, freq ~ patient + traitement) timolol_table # traitement # patient placebo timolol # malade 128 116 # sain 19 44 La sortie par défaut d’un tableau de contingence n’est pas très esthétique, mais plusieurs options existent pour le formatter d’une façon agréable. En voici deux exemples : pander::pander(timolol_table, caption = &quot;Exemple de table de contingence à double entrée.&quot;) Exemple de table de contingence à double entrée. placebo timolol malade 128 116 sain 19 44 knitr::kable(timolol_table, caption = &quot;Exemple de table de contingence à double entrée.&quot;) Tableau 6.1: Exemple de table de contingence à double entrée. placebo timolol malade 128 116 sain 19 44 Il est même possible de représenter graphiquement un tableau de contingence pour l’inclure dans une figure composée, éventuellement en le mélangeant avec des graphiques1. tab1 &lt;- ggpubr::ggtexttable(head(biometry), rows = NULL) tab2 &lt;- ggpubr::ggtexttable(table(biometry$gender, biometry$age_rec)) combine_charts(list(tab1, tab2), nrow = 2) Différentes fonctions dans R existent également pour convertir un tableau de contingence en tableau cas par variables (ou en tous cas, en un tableau similaire). Par exemple, as_dataframe() renvoie un tableau indiquant les fréquences d’occurences : (timolol2 &lt;- as_dataframe(timolol_table, n = &quot;freq&quot;)) # # A tibble: 4 x 3 # patient traitement freq # &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; # 1 malade placebo 128 # 2 sain placebo 19 # 3 malade timolol 116 # 4 sain timolol 44 Si vous insistez, vous pouvez aussi obtenir un tableau cas par variables (mais celui-ci est très long et peu pratique à manipuler) à l’aide de la fonction uncount()2 : uncount(timolol2, freq) # # A tibble: 307 x 2 # patient traitement # &lt;chr&gt; &lt;chr&gt; # 1 malade placebo # 2 malade placebo # 3 malade placebo # 4 malade placebo # 5 malade placebo # 6 malade placebo # 7 malade placebo # 8 malade placebo # 9 malade placebo # 10 malade placebo # # ... with 297 more rows 6.1.3 Métadonnées Les données dans un tableau de données doivent impérativement être associées à un ensemble de métadonnées. Les métadonnées (metadata en anglais) apportent des informations complémentaires nécessaires pour une interprétation corrrecte des données. Elles permettent donc de replacer les données dans leur contexte et de spécifier des caractéristiques liées aux pesures réalisées comme les unités de mesure par exemple. \\[Donn\\acute{e}es \\ de \\ qualit\\acute{e} \\ = \\ tableau \\ de \\ donn\\acute{e}es + \\ m\\acute{e}tadonn\\acute{e}es\\] Les données correctement qualifiées et documentée sont les seules qui penvent être utilisées par un collaborateur externe. C’est à dire qu’une personne externe à l’expérience ne peut interpréter le tableau de données que si les métadonnées sont complètes et explicites. Exemple de métadonnées : Unités de mesure (exemple : 3,5 mL, 21,2 °C) Précision de la mesure (21,2 +/- 0,2 dans le cas d’un thermomètre gradué tous les 0,2 °C) Méthode de mesure utilisée (thermomètre à mercure, ou électronique, ou …) Type d’instrument employé (marque et modèle du thermomètre par exemple) Date de la mesure Nom du projet lié à la prise de mesure Nom de l’opérateur en charge de la mesure … Vous avez pu vous aperçevoir que la fonction read() permet d’ajouter certaine métadonnées comme les unités aux variables d’un jeu de données. Cependant, il n’est pas toujours possible de rajouter les métadonnées dans un tableau sous forme électronique, mais il faut toujours les consigner dans un cahier de laboratoire, et ensuite les retranscrire dans le rapport. 6.1.4 Dictionnaire des données Le dictionnaire des données est un élément important de la constitution d’une base de données. Il s’agit d’un tableau annexe qui reprend le nom de chaque variable, son label (nom plus long et explicite), son type (numérique, facteur, facteur ordonné, date, …), la taille (de moindre importance pour nous), et un commentaire éventuel. Dans notre contexte, il est également utile de renseigner les unités de mesure, et la façon dont les données manquantes sont encodées. Cela donne donc un tableau du genre : Variable Label Unités Type Val. manquantes Commentaire date Date - Date NA Date de mesure age Âge années numeric -1 diameter Diamètre du test mm numeric NA Moyenne de deux diamètres perpendiculaires origin Origine - factor unknown “Fishery” = oursins sauvages, “Farm” = oursins d’élevage Ce tableau peut-être encodé sous forme textuelle et placé dans le même dossier que le jeu de données lui-même. Il peut aussi être encodé comme feuille supplémentaire dans une fichier Excel. Le dictionnaire des données est un outil important pour comprendre ce que contient le tableau de données, et donc, son inteprétation. Ne le négligez pas ! Utilisez cette option avec parcimonie : il vaut toujours mieux représenter un tableau comme … un tableau plutôt que comme une figure !↩ Notez également que passer d’un tableau cas par variables à un tableau des fréquences d’occurences se fait à l’aide de count().↩ "],
["population-et-echantillonnage.html", "6.2 Population et échantillonnage", " 6.2 Population et échantillonnage … DT::datatable(iris) "],
["acquisition-de-donnees.html", "6.3 Acquisition de données", " 6.3 Acquisition de données Dans le module 5, vous avez pris connaissance des types de variable et venez d’apprendre comment encoder différents types de tableaux de données et de leurs associer les indispensables métadonnées. Cependant, la première étape avant d’acquérir des données est de planifier correctement son expérience. La Science des Données est intimement liée à la démarche scientifique et intervient dans toutes les étapes depuis la caractérisation de la question et le planning de l’expérience jusqu’à la diffusion des résultats. Plus en détails, cela correspond à : Définir une question (objectif) Réaliser une recherche bibliographique sur la thématique Définir le protocole de l’expérience à partir de l’objectif Définir la population étudiée et l’échantillonnage Définir les variables à mesurer Définir les unité des mesures Définir la précision des mesures Définir les instruments de mesure nécessaires Définir les conventions d’encodage Codifier l’identification des individus Définir les niveaux des variables facteurs et leurs labels Acquérir et encoder les données Traiter les données Importer des données Remanier des données Visualiser et décrire des données Analyser les données (traitements statistiques, modélisation,…). Produire des supports de présentation pour répondant à la question de départ et diffuser l’information dans la communauté scientifique Nous trtaitons ici des premières étapes qui visent à acquérir les données. 6.3.1 Précision et exactitude Les erreurs de mesures sont inévitables lors de l’acquisition de nos données. Cependant, il est possible de les minimiser en choisissant un instrument plus précis (precise en anglais) et plus exact (accurate en anglais). La figure ci-dessous illustre de manière visuelle la différence qu’il y a entre précision et exactitude. 6.3.2 Codification des données Afin d’éviter que divers collaborateurs encodent différemment la même information, vous allez devoir préciser très clairement comment encoder les différentes variables de votre jeu de données. Par exemple pour une variable genre, est-ce que vous indiquez homme ou femme, ou h / f, ou encore H / F ? De même, vous allez devoir attribuer un code unique à chaque individu mesuré. Enfin, vous devez vous assurer que toutes les mesures sont réalisées de la même manière et avec des instruments qui, s’ils sont différents, seront cependant intercalibrés. Comment faire ? Réfléchissez à cette question sur base d’une mesure de la masse des individus à l’aide de pèse-personnes différents ! 6.3.2.1 Respect de la vie privée Lors d’expérience sur des personnes, le respect de la vie privée doit être pris en compte3. Le nom et le prénom, ou toute autre information permettant de retrouver les individus étudiés (adresse mail, numéro de sécurité sociale, etc.) ne peut pas apparaître dans la base de données consolidée. En outre, il vous faudra un accord explicite des personnes que vous voulez mesurer, et il faudra leur expliquer ce que vous faites, et comment les données seront ensuite utilisées. Une question se pose : comment pouvoir revenir vers les enregistrements liés à un individu en particulier (en cas d’erreur d’encodage, par exemple) si les informations relatives directement à ces individus ne sont pas consignées dans le tableau final ? Réfléchissez à la façon dont vous vous y prendriez avant de lire la suite… Voici un petit tableau qui correspond à ce que vous ne pourrez pas faire (nom et prénom explicitement mentionnés dans le tableau) : (biometry_marvel &lt;- as_dataframe(tribble( ~id, ~sex ,~weight, ~height, &quot;Banner Bruce&quot;, &quot;M&quot;, 95, 1.91, &quot;Stark Tonny&quot;, &quot;M&quot;, 80, 1.79, &quot;Fury Nicholas&quot;, &quot;M&quot;, 82, 1.93, &quot;Romanoff Natasha&quot;, &quot;F&quot;, 53, 1.70 ))) # # A tibble: 4 x 4 # id sex weight height # &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; # 1 Banner Bruce M 95 1.91 # 2 Stark Tonny M 80 1.79 # 3 Fury Nicholas M 82 1.93 # 4 Romanoff Natasha F 53 1.7 Vous devez fournir une code permettant de garder l’anonymat des sondés à l’ensemble des personnes étudiées vis à vis des analystes qui vont utiliser ces données. Cependant, le code doit permettre au chercheur ayant pris ces mesures de les retrouver dans son cahier de laboratoire, si besoin. Une façon de procéder consiste à attributer un numéro au hasard par tirage dans une urne à chacune des personnes chargées des mesures. Ensuite, chaque expérimentateur attribue lui-même un second numéro aux différentes personnes qu’il mesure. Prenons par exemple le scientifique n°24 (seul lui sait qu’il porte ce numéro). Il attribue un code de 1 à n à chaque personne étudiée. En combinant le code secret de l’expérimentateur et le code individu, cela donne un identifiant unique de la forme 24_1, 24_2, etc. Il pourra alors encoder sa partie comme suit : (biometry_marvel1 &lt;- as_dataframe(tribble( ~id, ~sex , ~weight, ~height, &quot;24_1&quot;, &quot;M&quot;, 95, 1.91, &quot;24_2&quot;, &quot;M&quot;, 80, 1.79, &quot;24_3&quot;, &quot;M&quot;, 82, 1.93, &quot;24_4&quot;, &quot;F&quot;, 53, 1.70 ))) # # A tibble: 4 x 4 # id sex weight height # &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; # 1 24_1 M 95 1.91 # 2 24_2 M 80 1.79 # 3 24_3 M 82 1.93 # 4 24_4 F 53 1.7 Il garde néanmoins les correspondances dans son carnet de laboratoire, au cas où il faudrait faire des vérifications ou revenir à la donnée originale. (biometrie_correspondance &lt;- data_frame( name = biometry_marvel$id, id = biometry_marvel1$id )) # # A tibble: 4 x 2 # name id # &lt;chr&gt; &lt;chr&gt; # 1 Banner Bruce 24_1 # 2 Stark Tonny 24_2 # 3 Fury Nicholas 24_3 # 4 Romanoff Natasha 24_4 A partir des données du tableau général consolidé, personne à part lui ne peut revenir sur ces données d’origine et mettre un nom sur les individus mesurés. Et lui-même n’a pas la possibilité de déterminer qui se cache derrière les autres identifiants tels 3_1, 12_4, 21_2, etc. A vous de jouer Votre objectif est d’acquérir des données pour étudier la prévalence de l’obésité dans la population. En classe, vous allez réfléchir par équipes aux données qu’il vous faudra mesurer : quoi ? pourquoi ? comment ? Les résultats de votre réflexion seront ensuite consolidées pour arriver à un consensus général. Ensuite, le fruit de cette réflexion ainsi que l’analyse que vous réaliserez seront à ajouter dans le projet sdd1_biometry. Une feuille Google Sheets sera mise à disposition pour encoder vos données de manière collaborative sur base des spécifications que vous aurez formulées. Attention, veuillez à respectez les conventions que vous aurez édifiées ensemble lors de l’encodage… et n’oubliez pas de préciser également les métadonnées ! En Europe, les données numériques concernant les personnes sont soumises à des règles strictes édictées dans le Règlement Général pour la Protection des Données ou RGPD en abbrégé, en vigueur depuis le 25 mai 2018. Vous devez vous assurer de respecter ce règlement lors de la collecte et de l’utilisation de données relatives à des personnes. Pour les autres type de données, le droit d’auteur ou des copyrights peuvent aussi limiter votre champ d’action. Renseignez-vous !↩ "],
["recombinaison-de-tableaux.html", "6.4 Recombinaison de tableaux", " 6.4 Recombinaison de tableaux 6.4.1 gather() &amp; spread() Encoder correctement un tableau de données n’es pas une chose simple. Il peut y avoir plusieurs manières de le représenter en fonction du type de représentation que l’on souhaite, du type d’analyse,…Quoi qu’il en soit, il est important de connaitre les fonctions permettant de recombiner simplement un tableau de données. L’aide-mémoire Data Import::CHEAT SHEET est l’outil pour vous aider dans cette tache. Vous y trouverez des explication dans la section Reshape Data. Ces outils provenant du package tidyr sont décrits en détails dans “R for Data Science”. Prenons l’exemple de ce tableau de contingence provenant des données relatée dans l’article suivant : Paleomicrobiology to investigate copper resistance in bacteria : isolation and description of Cupriavidus necator B9 in the soil of a medieval foundry. L’article est basé sur l’analyse métagénomique de type shotgun pour 4 communautés microbiennes. Comme ces analyses coûtent très cher, il est souvent impossible de faire des réplicats. Un seul échantillon d’ADN a donc été séquencé par communauté. Il en résulte une longue liste de sequences que l’on peut attribuer à des règnes. shot_gun &lt;- data.frame(kingdom = c(&quot;Archaea&quot;, &quot;Bacteria&quot;, &quot;Eukaryota&quot;, &quot;Viruses&quot;, &quot;other sequences&quot;, &quot;unassigned&quot;, &quot;unclassified sequences&quot;), c1 = c( 98379, 6665903, 81593, 1245, 757, 1320419, 15508), c4 = c( 217985, 9739134, 101834, 4867, 1406, 2311326, 21572), c7 = c( 143314, 7103244, 71111, 5181, 907, 1600886, 14423), c10 = c(272541, 15966053, 150918, 15303, 2688, 3268646, 35024)) rmarkdown::paged_table(shot_gun) Ce tableau dénombre les séquences appartenant à chaque règne. Ce tableau de contingence est pratique afin de reprensenter les données mais il ne l’est pas autant pour réaliser des graphiques (par exemple). Les colonnes C1, C4, C7 et C10 sont d’une certaine manière une variable facteur qui a été employé en colonne que l’on peut aisement retransformé comme telle. shot_gun1 &lt;- gather(shot_gun, c1, c4, c7, c10, key = &quot;batch&quot; ,value = &quot;sequences&quot;) rmarkdown::paged_table(shot_gun1) Vous en conviendrez que le tableau nommé shot_gun1 est moins aisée à lire comparé à tableau shot_gun. Cependant, il permet de produire facilement des graphique. chart(shot_gun1, formula = sequences ~ batch %fill=% kingdom) + geom_col(position = &quot;fill&quot;) La fonction opposée à gather() est la fonction spread() qui permet de retourner vers le tableau d’origine. shot_gun2 &lt;- spread(shot_gun1, key = batch, value = sequences) # visualisation du tableau de données rmarkdown::paged_table(shot_gun2) 6.4.2 separate &amp; unite() Lors de vos analyses vous serez confronté à devoir combiner ou séparer des colonnes de votre tableau de données. L’aide-mémoire Data Import::CHEAT SHEET est l’outil pour vous aider dans cette tache. Vous y trouverez des explication dans la section Split Cells. Ces outils provenant du package tidyr sont décrits en détails dans “R for Data Science”. Partez donc du jeu de données sur la biométrie des crabes du package MASS crabs &lt;- read(&quot;crabs&quot;, package = &quot;MASS&quot;, lang = &quot;fr&quot;) rmarkdown::paged_table(crabs) La fonction qui permet de combiner facilement les colonnes sex et species est la fonction unite() comme montré dans l’exemple ci-dessous. N’hésitez pas à faire appel à la fonction d’aide pour connaitre les arguments de la fonction. crabs &lt;- unite(crabs, col = &quot;sp_sex&quot;,sex, species, sep = &quot;_&quot;) rmarkdown::paged_table(crabs) La fonction opposée à unite() est la fonction separate() qui permet de retourner vers le tableau d’origine. crabs &lt;- separate(crabs, col = &quot;sp_sex&quot;, into = c(&quot;sex&quot;, &quot;species&quot;), sep = &quot;_&quot;) rmarkdown::paged_table(crabs) "],
["multi-tableaux.html", "6.5 Multi-tableaux", " 6.5 Multi-tableaux Durant vos analyses, vous serez confronté à devoir gérer plusieurs tableaux que vous allez vouloir rassembler en un seul tableau. L’aide-mémoire Data Import::CHEAT SHEET est l’outil pour vous aider dans cette tache. Vous y trouverez des explications dans la section Combine Tables. Ces outils provenant du package dplyr sont décrits en détails dans “R for Data Science”. Pour combiner deux tableaux de données par les lignes, la fonction la plus simple est bind_rows(). Partons de données mesurée dans les mésoscosmes de notre laboratoire les différents paramètres suivants : - la temperature, le ph, la salinté, l’oxygène dissous à l’aide d’instruments tels qu’un pHmètre, un conductimètre ou encore un oxymètre - la concentration en orthophosphate et en nitrate dissous dans l’eau à l’aide d’un autoanalyseur employant la colorimétrie Ils ont obtenu 3 fichiers qu’ils ont du par la suite recombiner. Le groupe A a encodé le tableau suivant : param_physico_A &lt;- as_dataframe(tibble(sample = c(&quot;A0&quot;, &quot;B0&quot;, &quot;A0&quot;, &quot;B0&quot;, &quot;A0&quot;, &quot;B0&quot;, &quot;A0&quot;, &quot;B0&quot;), ph = c(7.94, 7.94, 7.94, 7.99, 7.94, 7.99, 7.94, 7.99), salinity = c(34.0, 35.3, 33.9, 35.1, 34.0, 35.2, 33.9, 35.1), oxygen = c(7.98, 8.00, 7.98, 7.98, 7.99, 7.86, 7.89, 7.98), temperature = c(24.6, 24.4, 25.1, 24.7, 24.9, 24.7, 25.0, 24.6), student = c(&quot;st1&quot;, &quot;st1&quot;, &quot;st2&quot;, &quot;st2&quot;, &quot;st3&quot;, &quot;st3&quot;, &quot;st4&quot;, &quot;st4&quot; ) )) rmarkdown::paged_table(param_physico_A) Le groupe B a encodé le tableau suivant : param_physico_B &lt;- as_dataframe(tibble(sample = c(&quot;A0&quot;, &quot;B0&quot;, &quot;A0&quot;, &quot;B0&quot;), ph = c(7.94, 7.99, 7.93, 7.99), salinity = c(33.8, 35.0, 33.9, 35.1), oxygen = c(7.96, 8.01, 7.90, 8.00), temperature = c(25.0, 24.6, 24.0, 24.0), student = c( &quot;st5&quot;, &quot;st5&quot;, &quot;st6&quot;, &quot;st6&quot;) )) rmarkdown::paged_table(param_physico_A) La combinaison des deux tableaux de données se fait via la fonction bind_rows() param_physico &lt;- bind_rows(param_physico_A, param_physico_B) rmarkdown::paged_table(param_physico) Les deux groupes ont également réalisés des prélèvements d’eau qui ont été dosé par colorimétrie avec un autoanalyseur. Les échantillons des deux groupes ont été analysé dans la même série. nutrient &lt;- as_dataframe(tibble(sample = rep(c(&quot;A0&quot;, &quot;B0&quot;), times = 6), student = c(&quot;st4&quot;, &quot;st4&quot;, &quot;st6&quot;, &quot;st6&quot;, &quot;st5&quot;, &quot;st5&quot;, &quot;st2&quot;, &quot;st2&quot;, &quot;st1&quot;, &quot;st1&quot;, &quot;st3&quot;, &quot;st3&quot;), po4_conc = c(2.445, 0.374, 2.446, 0.394, 2.433, 0.361, 2.441, 0.372, 2.438, 0.388, 2.445, 0.390), no3_conc = c(1.145, 0.104, 0.447, 0.066, 0.439, 0.093, 0.477, 0.167, 0.443, 0.593, 0.450, 0.125) )) rmarkdown::paged_table(nutrient) Pour combiner deux tableaux de données par les colonnes, la fonction la plus simple est bind_cols(). Vous devez être très vigilant lors de l’utilisation de cette fonction car cette dernière combine vos tableaux sans s’assurer que vos lignes soient alignées convenablement. param &lt;- bind_cols(param_physico, nutrient) # Visualisation du tableau de données rmarkdown::paged_table(param) Qu’observez vous ? Effectivement nos deux tableaux de données n’ont pas les lignes dans le même ordre. Il faut être vigilant lors de ce genre de combinaison de tableaux. IL est préférable d’employer des fonctions comme left_joint() qui vont employer un ou plusieurs colonnes similaire sur les deux tableaux de donnée. param &lt;- left_join(param_physico, nutrient, by = c(&quot;student&quot;, &quot;sample&quot;)) # Visualisation du tableau de données rmarkdown::paged_table(param) A vous de jouer TODO "]
]
