[
["index.html", "Science des données biologiques, UMONS Préambule", " Science des données biologiques, UMONS Philippe Grosjean &amp; Guyliann Engels 2018-06-14 Préambule Cet ouvrage couvrira, à terme, la matière des cinq cours de science des données enseignés aux biologistes de la Faculté des Sciences de l’Université de Mons (Belgique). La matière sera complétée progressivement à partir du premier cours prévu pour l’année académique 2018-2019. Cet ouvrage sera également disponible en format PDF (en vue de son impression), mais il est surtout conçu pour être utilisé de manière interactive, en ligne. En effet, nous prévoyons d’y adjoindre des capsules (unités d’enseignement ciblant un et un seul concept) sous forme de vidéos, des démonstrations interactives, et des exercices sous forme de questionnaires interactifs également. Ces différents éléments ne sont, bien évidemment, utilisables qu’en ligne. "],
["vue-generale-du-cours.html", "Vue générale du cours", " Vue générale du cours Le premier cours intitulé Science des données I: visualisation et inférence qui sera dispensé aux biologistes de second Bachelier en Faculté des Sciences de l’Université de Mons à partir de l’année académique 2018-2019 contient 25h de cours et 50h d’exercices en presentiel, et il nécessitera environ un tiers de ce temps (voir plus, en fonction de votre rythme et de votre technique d’apprentissage) de travail à domicile. Cette matière est divisée en 12 modules de 2h de cours et 4h d’exercices en présentiel chacun (voir Figure .). Cependant, la formation étant prévue en grande partie en classe inversée, les 6h de chaque module seront mises à profit pour des activités interactives dans le cadre de la matière dévolue à chaque module. Figure .: Agencement des différents modules du cours I. "],
["materiel-pedagogique.html", "Matériel pédagogique", " Matériel pédagogique Du matériel varié vous est proposé. Vous pourrez ainsi piocher dans l’offre en fonction de vos envies et de votre profil d’apprenant pour optimiser votre travail. Vous trouverez: un ouvrage en ligne (celui que vous lisez en ce moment!) et qui pointe vers les différentes autres ressources disponibles, des capsules, essentiellement sous forme de vidéos &lt; 10 min qui ciblent chacune un concept particulier, des tutoriaux, éventuellement interactifs, des documents learnr, c’est-à-dire, des pages Web interactives avec explications, exercices et quizzs en ligne, des slides (essentiellement liées aux cours plus classiques), des dépôts Github Classroom dans BioDataScience-Course (vous apprendrez ce que c’est très rapidement dès le premier module) pour réaliser et documenter vos travaux personnels. des renvois vers des documents externes en ligne, types vidéos youtube ou vimeo, des ouvrages en ligne en anglais ou en français, des blogs, des tutoriaux, des vignettes liées aux packages R, des parties gratuites de cours Datacamp ou équivalents, des questions Stackoverflow ou mailing list R, … Tout ce matériel sera accessible à partir d’un site web, de Moodle et/ou du dossier SDD sur StudentTemp en Intranet UMONS. Les aspects pratiques seront à réaliser en utilisant la ‘SciViews Box’, une machine virtuelle préconfigurée que nous installerons ensemble lors du premier cours1. Il vous faudra donc avoir accès à un ordinateur (sous Windows, MacOS, ou Linux peu importe, suffisamment puissant et connecté à Internet ou à l’Intranet UMONS). Enfin, vous pourrez poser vos questions par mail à l’adresse sdd@sciviews.org. Il est donc très important que vous soyez présent à ce cours, et vous pouvez venir aussi avec l’ordinateur portable que vous utiliserez ensuite chez vous.↩ "],
["comment-apprendre.html", "Comment apprendre?", " Comment apprendre? fortunes::fortune(&quot;brain surgery&quot;) #! #! I wish to perform brain surgery this afternoon at 4pm and don&#39;t know where #! to start. My background is the history of great statistician sports #! legends but I am willing to learn. I know there are courses and numerous #! books on brain surgery but I don&#39;t have the time for those. Please direct #! me to the appropriate HowTos, and be on standby for solving any problem I #! may encounter while in the operating room. Some of you might ask for #! specifics of the case, but that would require my following the posting #! guide and spending even more time than I am already taking to write this #! note. #! -- I. Ben Fooled (aka Frank Harrell) #! R-help (April 1, 2005) Version courte: en pratiquant, en faisant des erreurs! Version longue: aujourd’hui –et encore plus dans l’avenir– les données sont complexes et ne se manipulent plus simplement avec un tableur comme Microsoft Excel. Vous allez apprendre à maitriser des outils professionnels, ce qui sous-entend qu’ils sont très puissants mais aussi relativement complexes. La méthode d’apprentissage que nous vous proposons a pour objectif prioritaire de vous faciliter la tâche, quelles que soient vos aptitudes au départ. Envisagez votre voyage en science des données comme l’apprentissage d’une nouvelle langue. C’est en pratiquant, et en pratiquant encore sur le long terme que vous allez progresser. La formation s’étale sur quatre années, et est répartie en cinq cours de difficulté croissante pour vous aider dans cet apprentissage progressif et dans la durée. N’hésitez pas à expérimenter, tester, essayer des nouvelles idées (même au delà de ce qui sera demandé dans les exercices) et n’ayez pas peur de faire des erreurs. Vous en ferez, … beaucoup … nous vous le souhaitons! En fait, la meilleure manière d’apprendre, c’est justement en faisant des erreurs, et puis en mettant tout en oeuvre pour les comprendre et les corriger. Donc, si un message d’erreur, ou un “warning” apparait en rouge dans le logiciel, ne soyez pas intimidé. Prenez une bonne respiration, lisez-le attentivement, essayez de le comprendre, et au besoin faites-vous aider: la solution est sur le Net, ‘Google2 est votre ami’! Il existe des outils plus pointus, par exemple, pour obtenir de l’aide sur le logiciel R (ref à ajouter ici vers un appendice)↩ "],
["evaluation.html", "Evaluation", " Evaluation L’évaluation sera une somme de petites contributions qui matérialiseront votre progression sur le long terme. Avec cette évaluation, nous souhaitons vous gratifier chaque fois que vous franchirez des étapes, plutôt que de vous sanctionner lorsque vous bloquez. Donc, pour une note finale sur 20: 2 points pour la progression sur base des exercices que vous réaliserez en classe inversée (donc, chez vous). 2 points pour la restitution des capsules et votre participation en présentiel. Au début de chaque séance, nous discuterons des notions que vous aurez à préparer par avance, et votre participation sera évaluée. 5 points pour un quizz final: vous aurez à répondre à cinq questions au hasard (set différent pour chaque étudiant sur base de 20 questions au total). 11 points pour l’évaluation d’un des rapports d’analyse de données (choisi au hasard en fin de cours). Enfin, vous pourrez éventuellement encore gagner un point bonus pour une participation remarquable, ou tout autre élément à valoriser (site web personnel et/ou blog exceptionnel, contribution significative à l’ouvrage bookdown (Xie 2018a) collaboratif, aide des autres étudiants, etc.). Ceci étant à l’appréciation des enseignants. Le matériel dans cet ouvrage est distribué sous licence CC BY-NC-SA 4.0. TODO: Ajouter des blocs particuliers comme suggestion, warning, piège, info, etc. (voir 2.7 dans bookdown) Ajout de widgets HTML &amp; apps Shiny: voir 2.10 &amp; 2.11. Lire et voir ce qui est intéressant à partir de section 3 dans bookdown. Références "],
["intro.html", "Module 1 Introduction", " Module 1 Introduction Contenu provisoire, à retravailler en fonction d’un canevas commun aux différents modules. L’objectif de ce module est de motiver les étudiants pour apprendre les outils qui leur permettront de faire de la science des données. nous n’entrerons pas directement dans le vif du sujet, mais nous initierons une activité plus ludique, mais néanmoins utile et qui leur permettra de faire connaissance avec divers outils logiciels dont Git, Markdown, RStudio, Blogdown, … Il s’agira de réaliser son propre site web professionnel avec blogdown et un dépôt Github. Les acquis recherchés ici sont: Appréhender ce qu’est la science des données et les (bio)statistiques. S’initier à des outils de base (SciViews Box, RStudio, Markdown, git, Github). Se sensibiliser à l’importance d’une présence web au niveau professionnel. Un template blogdown sera fourni dans Github Classroom. Il sera également expliqué qu’un “bookdown” collectif sera créé, et pourra être complété par les étudiants avec du matériel qu’ils créeront eux-mêmes, ou des liens vers des sites intéressants qu’ils découvriront au cours de leur apprentissage. Concernant ces éléments concrets, un débriefing sera prévu concernant la participation au “bookdown” au module #11. Idées provisoires: Fournir un document qui explique comment on passe du document R Markdown à la version finale, grâce à knitr (Xie 2018b; Xie 2015). Présentation 1h, installation de SciViews Box sur les machines du labo et présentation de RStudio + projet + un document markdown + ajouter git et montrer l’intérêt, suivi d’une “install party” (temps prévu après le cours), quelques jours où ils ont à digérer la matière, voir Markdown et créer un compte Github, 2h pour créer le site web blogdown. Ensuite, il faut du matériel qui présente git, github, clone, commit, push, pull, fetch, … comme capsule à étudier après le cours Début de module suivant (participation cotée): réexpliquer avec ses propres mots git + Github. Leur expliquer les changements. Comment le monde était il y a 25 ans? Pas d’internet, pas de smartphone. Que feraient-ils sans smartphone. Les révolutions indistrielles: 1770 (1756) révolution 1: mécanisation 1870 révolution 2: maîtrise de l’énergie 1970 (1979) révolution 3: informatique 1990 révolution 4: internet (1990 Web, 1992 ISOC = Internet society, 1993 = premuer browser web) 2000 révolution 5: numérique. GAFA = Google - Apple - Facebook - Amazon + Microsoft = GAFAM aux USA et BATX en Chine = Baidu - Alibaba - Tencent - Xiaomi. Aussi NATU = Netflix - Airbnb - Tesla - Uber. 2010 révolution 6: NBIC = nanotechnologies - biotechnologies - informatique - sciences cognitives. 2020 = date prévue pour que l’ordinateur ait la même puissane de traitement de l’information que le cerveau humain 2030 = transhumanisme: ordinateur plus puissant que l’homme et le remplaçant. Valeur estimée des données et informations mises à disposition par les utilisateurs du net: 1000 milliards de dollar par an (écrire en chiffres)! En 2020, quantité d’information ajoutée sur le net: 1000 milliards de milliards par semaine (écrire en chiffre aussi) Comparaison de puissance de traitement du cerveau humain versus l’ordinateur: 89 milliards de neurones, mais travail en multitâche alors qu’un processeur est monotâche =&gt; difficile à comparer. Une étude a montré en 2017 que l’un des 5 ordinateurs les plus puissants a été capable de simuler le fonctionnement d’environ 1% du cerveau humain en 1 sec. Il lui a fallu 40 min de calcul pour y arriver. Intel estime que l’évolution permettra d’égaler le cerveau humain en terme de vitesse de traitement vers 2020. Consommation du supercalculateur: en mégawatts, alors que le cerveau humain consomme 12-13W seulement! “Le transhumanisme est une approche interdisciplinaire qui nous amène à comprendre et à évaluer les avenues qui nous permettrons de surmonter nos limites biologiques par les progrès technologiques. Les transhumanistes cherchent à développer les possibilités techniques afin que les gens vivent plus longtemps et …” Références "],
["visu1.html", "Module 2 Visualisation I", " Module 2 Visualisation I Vos objectifs pour ce module sont: Découvrir –et vous émerveiller de– ce que l’on peut faire avec le logiciel R (R Core Team 2018) Savoir réaliser différentes variantes d’un graphique en nuage de points dans R avec la fonction chart() Découvrir le format R Markdown (Allaire et al. 2018) et la recherche reproductible Intégrer ensuite des graphiques dans un rapport et y décrire ce que que vous observez Comparer de manière critique un workflow ‘classique’ en biologie utilisant Microsoft Excel et Word avec une approche utilisant R et R Markdown; prendre conscience de l’énorme potentiel de R Références "],
["prerequis.html", "2.1 Prérequis", " 2.1 Prérequis Si ce n’est déjà fait (matériel du module 1), vous devez installer et vous familiariser avec la ‘SciViews Box’, RStudio et Markdown. Vous devez aussi maitriser les bases de git et de Github (avoir un compte Github, savoir clôner un dépôt localement, travailler avec Github Desktop pour faire ses commits, push et pull). A faire: proposer une liste de matériel pédagogique supplémentaire pour aider à approfondir les prérequis, si nécessaire "],
["visualisation-graphique-a-laide-du-nuage-de-points.html", "2.2 Visualisation graphique à l’aide du nuage de points", " 2.2 Visualisation graphique à l’aide du nuage de points Découvrez les premiers rudiments de R afin de réaliser par la suite vos premiers graphiques. Chargez le package BioDataScience + accès direct au learnR (à faire, package en cours de développement sur github) Maintenant que vous avez appris deux/trois principes dans R, vous souhaitez représenter une variable numérique en fonction d’une autre variable numérique. On peut exprimer cette relation dans R sous la forme de \\[y \\sim x\\] que l’on peut lire : \\[y \\ en \\ fonction \\ de \\ x\\] ou encore \\[Variable \\ quantitative \\ en \\ fonction \\ de \\ Variable \\ quantitative\\] Figure 2.1: Points essentiels d’un nuage de points Les instructions de base afin de produire une nuage de point sont : chart(DF, formula = YNUM ~ XNUM) + geom_point() La fonction chart() requiert comme argument le jeu de donnée ( dataframe, DF), ainsi que la formule à employer YNUM ~ XNUM. Pour réaliser une nuage de point vous devez ajouter la seconde fonction geom_point(). Les éléments indispensables à la compréhension d’un nuage de points sont (ici mis en évidence en couleur) : Les axes avec les graduations (en rouge) les labels et unité des axes (en bleu) 2.2.1 Pièges et Astuces Vous devez être particulièrement vigilant lors de la réalisation d’un nuage de point particulièrement sur les ranges de valeurs présentés sur vos axes. Vous devez utilisez votre expertise de biologistes pour vous posez les deux questions suivantes : Est ce que l’axe représente des valeurs plausibles de hauteurs et de masses de P. lividus ? Quels est la précision de mesures effectués ? a &lt;- chart(urchin,formula = height ~ weight) + geom_point() + labs( y = &quot;Hauteur du test [mm]&quot;, x = &quot;Masse [g]&quot;) + theme(text = element_text(size = 10)) b &lt;- a + scale_x_continuous(limits = c(0,500)) c &lt;- a + scale_x_continuous(limits = c(-100, 120)) d &lt;- a + scale_x_continuous(limits = c(-400, 400)) + scale_y_continuous(limits = c(-400, 400)) ggpubr::ggarrange(a,b,c,d,labels = &quot;AUTO&quot;, font.label = list(size = 14, align = &quot;hv&quot;)) Figure 2.2: Piège du nuage de points. A) graphique initiale montrant la variation de la hauteur [mm] en fonction de la masse [g] B) graphique A avec la modification de l’échelle de l’axe x. C) Graphique A avec une seconde modification de l’axe x. D) Graphique A avec modification de l’echelle de l’axe x et de l’axe Y. Vous avez la possiblité d’appliquer une transformation des données (il est même conseillé de le faire) afin qu’elle soit plus facilement analysable comme en alignant les point d’un nuage de point le long d’une droite (On parle de linéarisation3 des données en statistiques). Vous pouvez utilisez la puissance, racine, logarithme, exponentielle, inverse, .. Pour les proportions (p) ou les pourcentages (%) (valeurs bornées entre 0 et 1 ou 0 et 100%, la transformation arcsin est souvent utilisée : \\(p′ = \\arcsin \\sqrt{p}\\) ou \\(%′ = \\arcsin \\sqrt{frac{%}{100}}\\) a &lt;- chart(urchin,formula = height ~ weight) + geom_point() + labs( y = &quot;Hauteur du test [mm]&quot;, x = &quot;Masse [g]&quot;) b &lt;- chart(urchin,formula = log(height) ~ log(weight)) + geom_point() + labs( y = &quot;Logarithme de la hauteur du test [mm]&quot;, x = &quot;Logarithme de la Masse [g]&quot;) ggpubr::ggarrange(a,b,labels = &quot;AUTO&quot;, font.label = list(size = 14, align = &quot;hv&quot;)) Figure 2.3: A) Variation de la hauteur [mm] en fonction de la masse [g] d’oursins violets. B) Variation du logarithme de la hauteur [mm] en fonction du logarithme de la masse [g] d’oursins violets 2.2.2 Vidéo Vous trouverez une vidéo ci-dessous illustrant l’utilisation du nuage de point dans R sur un jeu de données portant sur la croissance des oursins (fiche informative sur le jeu de données (à faire)). Cette vidéo ne vous a montré que les principaux outils disponibles lors de la réalisation de graphique. Soyez curieux et regardez la section A vous de jouer ci-dessous. Vous avez à votre disposition l’aide-mémoire sur la visualisation des données (Data Visualization Cheat Sheet) 2.2.3 A vous de jouer ! Chargez le package BioDataScience + accès direct au learnR (à faire, package en cours de développement sur github) Les instructions que vous employez dans un learnR peuvent être employée dans un script d’analyse. Sur base des jeux de données urchin_bio, explorez différents graphiques en nuage de point. Assignment ClassRoom avec /R et un script. Inspirez vous de script présent dans le projet que vous venez de clonez. Faites une attention toute particulière à l’écriture d’un script. Il contient un titre , une date de la dernière mise à jour, le nom de l’auteur , un ensemble de commentaires permettant l’organisation de ce script. Réalisez votre propre script et réalisez les graphiques suivants : Représentez la variation de la hauteur en fonction de la masse des oursins Représentez la variation du parties solides en fonction du poids immergés des oursins Explorez par vous même le jeu de données urchin_bio qui contient pas moins de 19 variables que vous pouvez tentez d’associer graphiquement. Réalisez au moins 5 graphiques différents. 2.2.4 Pour en savoir plus… Visualisation des données dans R for Data Science. Chapitre du livre portant sur la visualisation des données ggplot2 nuage de point. Tutorial en français portant sur l’utilisation d’un nuage de point avec le package ggplot2 et la fonction geom_point(). Fundamentals of Data Visualization. Un livre sur les fondamentaux de la visualisation graphique. R Graphics Cookbook - Chapter 5: Scatter Plots. Un chapitre d’un livre en anglais sur l’utilisation du nuage de point. geom_point(). La fiche technique de la fonction proposée par tidyverse. TODO def↩ "],
["integration-des-graphiques-dans-un-rapport-r-markdown.html", "2.3 Intégration des graphiques dans un rapport: R Markdown", " 2.3 Intégration des graphiques dans un rapport: R Markdown Qu’est-ce que R Markdown? … 2.3.1 A vous de jouer ! Un squelette de projet RStudio vous a été fournit dans un dépôt Github Classroom, y compris organisation des fichiers et jeux de données types. Votre objectif est de comprendre les données proposées, en utilisant des visualisations graphiques appropriées et en documentant le fruit de votre étude dans un rapport R Notebook. Utilisez le graphique en nuage de points que vous venez d’étudier bien sûr, mais vous êtes aussi encouragés à expérimenter d’autres visualisations graphiques. Vous allez comparer différentes approches pour réaliser un rapport d’analyse lors de la prochaine séance d’exercices. 2.3.2 La rédaction de rapport scientifique Un rapport scientifique respecte généralement le schéma suivant : Tables des matières Introduction Matériels et méthodes Résultat Discussion Conclusion Bibliographie Annexe (si nécessaire) Pour des travaux de plus grandes ampleurs comme les travaux de fin d’études, le schéma ci-dessus est adapté en y ajoutant généralement une partie remerciement en début de manuscrit. La rédaction de travaux s’appuye toujours sur une recherche bibliographique au préalable. Cependant, il est capital d’insérer convenablement les sources du travail au sein de la bibliographie afin d’éviter le plagiat volontaire ou involontaire. Il existe une multitude de programme permettant la gestion d’une bibliographie comme Mendeley, Zotero ou encore Endnote 2.3.3 Pour en savoir plus… What is R Markdown?. Video en anglais + site présentant les différentes possibilités, par les concepteurs de R Markdown (RStudio). Introduction to R Markdown. Tutorial en anglais, par RStudio, les concepteurs de R Markdown, Aide mémoire R Markdown: dans les menus RStudio Help -&gt; Cheatsheets -&gt; R Markdown Cheat Sheet Référence rapide à Markdown: dans les menus RStudio Help -&gt; Markdown Quick Reference Introduction à R Markdown. Présentation en français par Agrocampus Ouest - Rennes. Le langage R Markdown. Introduction en français concise, mais relativement complète. Recherche documentaire et aide à la création (ReDAC). L’Université de Mons met à disposition de ses étudiants un cours en ligne afin de trouver un maximum de renseignements sur la rédaction de rapport scientifique. Citer ses sources dans un rapport R Notebook : page en anglais présentant la manière d’introduire une bibliographie dans un rapport R Notebook. "],
["recapitulons.html", "2.4 Récapitulons", " 2.4 Récapitulons Petite réflexion concernant la comparaison Word-Excel versus R Markdown. Rédigez éventuellement un article sur votre blog à ce sujet. 2.4.1 Testez vos acquis Learnr de vérification des acquis Learnr de test des compétences "],
["visu2.html", "Module 3 Visualisation II", " Module 3 Visualisation II A ce niveau, les étudiants pourront choisir entre le module 3 et le module 4 à faire en premier. Ensuite, les groupes switcheront vers l’autre modules et s’entre-aideront. Distribution des données, histogramme, graphe de densité, violin plot. Projet RStudio, organisation des dossiers, noms de fichiers. Jeux de données fournis. A la fin, projet perso: explorer un autre type de graphique et l’implémenter dans son rapport. Vos objectifs pour ce module sont: Savoir réaliser différentes variantes de différents graphiques tel que les histogrammes, les graphes de densité dans R avec la fonction chart() Intégrer ensuite des graphiques dans un rapport et y décrire ce que que vous observez SciViews::R ## ── Attaching packages ──────────────────────────────────────────────────────────────────────────────── SciViews::R 1.0.0 ── ## ✔ SciViews 1.0.0 ✔ readr 1.1.1 ## ✔ svMisc 1.1.0 ✔ tidyr 0.8.1 ## ✔ forcats 0.3.0 ✔ tibble 1.4.2 ## ✔ stringr 1.3.1 ✔ ggplot2 2.2.1 ## ✔ dplyr 0.7.5 ✔ tidyverse 1.2.1 ## ✔ purrr 0.2.5 ✔ MASS 7.3.50 ## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ✖ dplyr::select() masks MASS::select() library(flow) library(chart) ## Le chargement a nécessité le package : lattice library(data) knitr::opts_chunk$set(echo=FALSE, results= &#39;hide&#39;, message=FALSE) iris &lt;- data::read(file = &quot;iris&quot;, package = &quot;datasets&quot;, lang = &quot;fr&quot;) "],
["prerequis-1.html", "3.1 Prérequis", " 3.1 Prérequis Si ce n’est déjà fait, vous devez avoir réaliser le module précédent. A faire: proposer une liste de matériel pédagogique supplémentaire pour aider à approfondir les prérequis, si nécessaire "],
["visualisation-graphique-a-laide-dun-histogramme.html", "3.2 Visualisation graphique à l’aide d’un histogramme", " 3.2 Visualisation graphique à l’aide d’un histogramme Lors d’une expérience vous souhaitez visualiser la façon dont vos données s’étale sur un axe (On parle de distribution4 en statistique) pour l’une des vairables étudiées. L’histogramme est l’un des outils pouvant vous apporter cette information. Ce graphique va découper en plusieurs classes5 la variable étudiée. Figure 2.1: Histogramme montrant la distribution de la longueur des pétales d’iris. Les instructions de base afin de produire un histogramme : chart(DF, formula = ~ VAR) + geom_histogram() La fonction chart() requiert comme argument le jeu de donnée (dataframe, DF), ainsi que la formule à employer ~ VAR . Pour réaliser un histogramme, vous devez ajouter la seconde fonction geom_histogram(). Les éléments indispensables à la compréhension d’un histogramme sont (ici mis en évidence en couleur) Les axes avec les graduations (en rouge) les labels et unité des axes (en bleu) Vous pouvez décripter votre histogramme sur base des modes6 et de la symétrie7 de ces derniers. Les modes les plus fréquents sont unimodal, bimodal ou multimodal. Figure 2.2: Histogrammes montrant les modes et symétries : a) histogramme unimodal et symétrique, b) histogramme bimodal et asymétrique, c) histogramme unimodal et asymétrique, d) histogramme multimodal et symétrique. 3.2.1 Pièges et Astuces Vous devez être particulièrement vigilant lors de la réalisation d’un histogramme au classes de ce dernier. library(shiny) runExample(&quot;01_hello&quot;) TODO↩ TODO↩ todo↩ TODO↩ "],
["visualisation-graphique-a-laide-dun-graphique-de-densite.html", "3.3 Visualisation graphique à l’aide d’un graphique de densité", " 3.3 Visualisation graphique à l’aide d’un graphique de densité L’histogramme n’est pas le seul outil à votre disposition. Vous pouvez également employer le graphique de densité qui se base sur l’histogramme. Il ne s’agit plus de représenter un dénombrement comme l’histogramme le fait mais une probabilité8 d’obtenir une valeur parmi un échantillon aléatoire. Le passage d’un histogramme vers un graphe de densité se base sur une estimation par noyaux gaussien9 Figure 2.3: A) Histogramme montrant la distribution de la longueur des pétales d’iris B) Graphique de densité montrant la distribution de la longueur des pétales d’iris. Les instructions de base afin de produire un histogramme sont : chart(DF, formula = ~ VAR) + geom_density() Les éléments indispensables à la compréhension d’un graphique de densité sont (ici mis en évidence en couleur) : Les axes avec les graduations (en rouge) les labels et unité des axes (en bleu) TODO↩ TODO↩ "],
["visualisation-graphique-a-laide-dun-diagramme-en-violon.html", "3.4 Visualisation graphique à l’aide d’un diagramme en violon", " 3.4 Visualisation graphique à l’aide d’un diagramme en violon Le graphique de densité peut être représenté via un autre graphique qui sera d’autant plus intéressant que la variable facteur étudiée peut être discriminée par un grand nombre de niveaux différents. Il s’agit également d’une estimation se basant sur un histogramme via la méthode l’estimation par noyau gaussien. Figure 3.1: Ponts essentiels d’un diagramme en violon. Les instructions de base afin de produire un diagramme en violon sont : chart(DF, formula = YNUM~ factor(VAR)) + geom_violin() "],
["a-vous-de-jouer-2.html", "3.5 A vous de jouer !", " 3.5 A vous de jouer ! Chargez le package BioDataScience + accès direct au learnR (à faire, package en cours de développement sur github) Un squelette de projet RStudio vous a été fournit dans un dépôt Github Classroom, y compris organisation des fichiers et jeux de données types. Votre objectif est de comprendre les données proposées, en utilisant des visualisations graphiques appropriées et en documentant le fruit de votre étude dans un rapport R Notebook. Utilisez le l’histogramme et le graphique de densité graphique que vous venez d’étudier bien sûr, mais vous êtes aussi encouragés à expérimenter d’autres visualisations graphiques. "],
["visu3.html", "Module 4 Visualisation III", " Module 4 Visualisation III SciViews::R ## ── Attaching packages ──────────────────────────────────────────────────────────────────────────────── SciViews::R 1.0.0 ── ## ✔ SciViews 1.0.0 ✔ readr 1.1.1 ## ✔ svMisc 1.1.0 ✔ tidyr 0.8.1 ## ✔ forcats 0.3.0 ✔ tibble 1.4.2 ## ✔ stringr 1.3.1 ✔ ggplot2 2.2.1 ## ✔ dplyr 0.7.5 ✔ tidyverse 1.2.1 ## ✔ purrr 0.2.5 ✔ MASS 7.3.50 ## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ✖ dplyr::select() masks MASS::select() library(knitr) library(flow) library(chart) ## Le chargement a nécessité le package : lattice library(data) knitr::opts_chunk$set(echo=FALSE, results= &#39;hide&#39;, message=FALSE) ToothGrowth &lt;- read(file = &quot;ToothGrowth&quot;, package = &quot;datasets&quot;, lang = &quot;fr&quot;) data(&quot;PlantGrowth&quot;) PlantGrowth &lt;- read(file = &quot;PlantGrowth&quot;, package = &quot;datasets&quot;, lang = &quot;fr&quot;) iris &lt;- read(file = &quot;iris&quot;, package = &quot;datasets&quot;, lang = &quot;fr&quot;) ChickWeight &lt;- read(file = &quot;ChickWeight&quot;, package = &quot;datasets&quot;, lang = &quot;fr&quot;) urchin &lt;- read(file = &quot;urchin_bio&quot;, package = &quot;data&quot;, lang = &quot;fr&quot;) diamonds &lt;- data::read(file = &quot;diamonds&quot;, package = &quot;ggplot2&quot;, lang = &quot;fr&quot;) Vos objectif durant ce module sont : Savoir réaliser différents graphiques comme le graphique en barre, le graphique en camembert ou encore la boite de dispersion, dans R avec la fonction chart() Savoir réaliser différentes variantes de plusieurs graphiques sur une fenêtre graphique. Découvrir différents systèmes graphiques (graphiques de base, Lattice, ggplot2) et comparaison avec chart() TODO: changer le jeu de données par des données biologiques "],
["prerequis-2.html", "4.1 Prérequis", " 4.1 Prérequis Si ce n’est déjà fait, vous devez avoir réaliser le module 1 &amp; 2. TODO : proposer une liste de matériel pédagogique supplémentaire pour aider à approfondir les prérequis, si nécessaire "],
["visualisation-graphique-a-laide-dun-graphique-en-barre.html", "4.2 Visualisation graphique à l’aide d’un graphique en barre", " 4.2 Visualisation graphique à l’aide d’un graphique en barre 4.2.1 Représentation d’un dénombration d’observations par facteur Vous souhaitez représenter une dénombrement des différentes niveaux d’une variables facteurs. On peux exprimer dans R sous la forme \\[\\sim variable \\ facteur\\] que l’on peut lire \\[\\ en \\ fonction \\ de \\ la \\ variable \\ facteur\\] Figure 2.1: Points essentiels d’un graphique en barre montrant le dénombrement des niveaux d’une variable facteur. Les instructions de base afin de produire un graphique en barre : chart(DF, formula = ~factor(VAR)) + geom_bar() La fonction chart() requiert comme argument le jeu de donnée (dataframe, DF), ainsi que la formule à employer ~factor(VAR). Pour réaliser un graphique en barre, vous devez ajouter la seconde fonction geom_bar(). Les éléments indispensables à la compréhension d’un graphique en barre sont (ici mis en évidence en couleur) : les axes avec les graduations (en rouge) le label en x (en bleu) les niveaux de la variable facteur 4.2.1.1 Représentation d’un dénombrement d’observations par plusieurs facteurs Différentes représentation sont possible pour observer des dénombrements tenant compte de plusieurs variables facteurs. Par défaut, l’argument position a pour valeur stack. Figure 2.2: Dénombrement de l’occurence en fonction de la variable facteur cut et de la variable clarity. Il existe d’autres solutions en utilisant la valeur dodge ou fill pour l’argument position. Figure 2.3: A) Graphique en barre du dénombrement de l’occurence en fonction de la variable facteur cut et de la variable clarity avec dodge comme valeur de l’argument position . B) Graphique en barre du dénombrement de l’occurence en fonction de la variable facteur cut et de la variable clarity avec fill comme valeur de l’argument position 4.2.1.2 Pièges et Astuces L’oeil humain perçoit plus distinctement les différences de tailles horizontales que verticales. Avec la fonction coord_flip() ajouté à votre graphique, vous pouvez ajouter une rotation des axes. Figure 3.1: Graphique en barre du dénombrement de l’occurence en fonction de la variable facteur cut 4.2.1.3 Pour en savoir plus http://www.sthda.com/french/wiki/ggplot2-barplots-guide-de-demarrage-rapide-logiciel-r-et-visualisation-de-donnees http://ggplot2.tidyverse.org/reference/geom_bar.html http://ggplot.yhathq.com/docs/geom_bar.html 4.2.2 Représentation d’une valeur moyenne à l’aide d’un graphe en barre. Le graphique en barre peut etre employé afin de résumer des données numériques via la moyenne. Il ne s’agit plus de dénombrer un nombre d’occurence d’une variable facteur mais de résumer des données numériques en fonction d’une variable facteur. On peut exprimer cette relation dans R sous la forme de \\[y \\sim x\\] que l’on peut lire : \\[y \\ en \\ fonction \\ de \\ x\\] ou encore \\[Variable \\ numérique \\ en \\ fonction \\ de \\ Variable \\ facteur\\] Prenez les chiffres suivants : 1, 71, 55, 68, 78, 60, 83, 120, 82 ,53, 26 Calculez la moyenne sur base de la formule de la moyenne \\[\\overline{y} = \\sum_{i = 1}^n \\frac{y_i}{n}\\] # création du vecteur x &lt;- c(1, 71, 55, 68, 78, 60, 83, 120, 82, 53, 26) # Calcul de la moyenne mean(x) En partant d’un jeu de données, comme celui ci dessous Vous pouvez observez que ce jeu de données comprend trois variables avec une première variable portant sur le longueur des dents de cochons d’Inde, une seconde variable portant sur la supplémentation administrée ( VC, vitamine Cou OJ, jus d’orange) à ces derniers et enfin une troisième variable portant sur la dose administrée (0.5, 1, 2). Afin de réaliser ce graphe en barre, il est indispensable de remanier les données pour obtenir une valeurs moyenne de la croissance des dents en fonction de la variable facteur portant sur la dose. # Transformation de la variable numérique portant sur la dose en variable facteur portant sur la dose à 3 niveaux ToothGrowth$dose &lt;- as.factor(ToothGrowth$dose) # formation d&#39;un tableau résumé des données ToothGrowth %&gt;.% group_by(., dose) %&gt;.% summarise(., mean = mean(len) ) -&gt; tg En partant du jeu de données ToothGrowth, on groupe les données par rapport à la variable facteur dose avec la fonction group_by() puis de réaliser un résumé des données et de créer un nouveau jeu de données appelé tg avec la fonction summarise(). La nouvelle variable calculée est la moyenne de la longueur des dents avec la fonction mean(). Figure 4.1: Points essentiels d’un graphique en barre résumant les données numériques d’une variable facteur. Les instructions de base afin de produire ce graphe en barre sont : chart(DF, formula = YNUM ~ factor(VAR)) + geom_col() Les éléments indispensables à la compréhension d’un graphe en barre sont (ici mis en évidence en couleur) : les axes avec les graduations (en rouge) les labels et unités des axes (en bleu) 4.2.2.1 Pièges et astuces Le graphe en barre est un graphique très répandu dans le domaine scientifique malgré le grand nombre d’arguments contre lui que vous pouvez lire dans la section Pour en savoir plus. L’un des arguments le plus important est la faible information qu’il apporte. 4.2.2.2 Pour en savoir plus https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3148365/ https://www.r-bloggers.com/dynamite-plots-in-r/ https://pablomarin-garcia.blogspot.com/2010/02/why-dynamite-plots-are-bad.html http://biostat.mc.vanderbilt.edu/wiki/pub/Main/TatsukiRcode/Poster3.pdf http://emdbolker.wikidot.com/blog%3Adynamite "],
["visualisation-graphique-a-laide-dun-graphique-en-camembert.html", "4.3 Visualisation graphique à l’aide d’un graphique en camembert", " 4.3 Visualisation graphique à l’aide d’un graphique en camembert Le graphique en camembert va vous permettre de visualiser un dénombrement d’observations par facteur, tout comme le graphique en barre. Figure 4.2: Points essentiels d’un graphique en camembert montrant le dénombrement des niveaux d’une variable facteur. Les instructions de base afin de produire ce graphe en camembert sont : chart(DF, formula = ~ factor(1) %fill=% factor(VAR)) + geom_bar() + coord_polar(&quot;y&quot;) Les éléments indispensables à la compréhension d’un graphe en camembert sont : les niveaux de la variable facteur 4.3.1 Pièges et astuces Le graphique en camembert est un graphique également fortement répandu. Cependant, l’oeil humain perçoit avec plus de précision les différences de formes que les différences d’angles. Un grand nombre de niveaux dans une variable facteur va avoir pour effet de remplir. De ce fait, il est donc déconseillé d’employer le graphique en camembert Partons d’un exemple fictif, combien d’observations pour la lettre h comptez vous ? Figure 4.3: Piège d’un graphique en camembert montrant le dénombrement des niveaux d’une variable facteur. Sur base de ce graphique en barre, combien d’observations pour la lettre h comptez vous ? Figure 4.4: Piège d’un graphique en barre montrant le dénombrement des niveaux d’une variable facteur. 4.3.2 Pour en savoir plus http://www.sthda.com/french/wiki/ggplot2-graphique-en-camembert-guide-de-demarrage-rapide-logiciel-r-et-visualisation-de-donnees https://dataparkblog.wordpress.com/2017/09/24/diagramme-en-camembert-avec-r-et-ggplot/ https://www.displayr.com/why-pie-charts-are-better-than-bar-charts/ http://www.perceptualedge.com/articles/08-21-07.pdf "],
["visualisation-graphique-a-laide-de-la-boite-de-dispersion.html", "4.4 Visualisation graphique à l’aide de la boite de dispersion", " 4.4 Visualisation graphique à l’aide de la boite de dispersion Vous souhaitez représenter graphiquement cette fois un résumé d’une variable numérique tout en gardant un maximum d’information. La boite de dispersion est l’un des outils pouvant vous apporter la solution. Cette dernière va représenter graphiquement 5 descripteurs appelés les 5 nombres. Prenez les chiffres suivants : 1, 71, 55, 68, 78, 60, 83, 120, 82 ,53, 26 ordonnez les de manière croissante # création du vecteur x &lt;- c(1, 71, 55, 68, 78, 60, 83, 120, 82, 53, 26) # ordonner le vecteur sort(x) Le premier descripteur des 5 nombres est la médiane qui se situe à la moitié des observations. median(x) Le premier quartile sera la valeur au milieu des 50% des données inférieurs à la médiane et le troisième quartile est la valeur centrale sur les 50% des données supérieurs à la médiane. La valeur manimale étant la valeur la plus petite et la valeurs maximale étant la valeur la plus élevée. fivenum(x) Vous pouvez réprésenter ce vecteur via une boite de dispersion Figure 4.5: Nuage de points montrant la première étape de la construction d’une boite de dispersion. La boite de dispersion représente donc les 5 nombres. Vous observez cependant que certaine valeur ne se situe pas dans la boite de dispersion, il s’agit de valeurs extrêmes. Elles sont considérées comme extrêmes car elles sont éloignées de plus 1.5 fois l’espace inter-quartile (Q3- Q1). La boite de dispersion s’arrete donc aux dernières valeurs présente dans cet espace inter-quartile (IQR). Figure 4.6: A) Nuage de points montrant la construction d’une boite de dispersion avec les 5 nombres représentés par des lignes noires. B) Boite de dispersion obtenue par rapport à la partie A. Les 5 nombres représentent de ce fait : Valeur minimale, Valeur du premier quartile, Valeur de la médiane (également appelée second quartile), Valeur du troisième quartile, Valeur maximale Figure 4.7: Points essentiels d’une boite de dispersion Les instructions de base afin de produire ce graphe en camembert sont : chart(DF, formula = ~ factor(1) %fill=% factor(VAR)) + geom_bar() + coord_polar(&quot;y&quot;) Les éléments indispensables à la compréhension d’un graphe en camembert sont : les niveaux de la variable facteur 4.4.0.1 Représentation de boites de dispersion par une variable facteurs à plusieurs niveaux Figure 4.8: Boite de dispersion de la longueur de pétales de trois espèces d’iris. 4.4.1 Pièges et Astuces Lors de la réalisation de boites de dispersion, vous devez être vigilant au nombre d’observation qui se cache sous chaque boite de dispersion. En effet, une boite de dispersion ne comportant que 5 valeurs ou moins n’a que peut d’intérêt d’être avec cet outils graphique. Figure 4.9: Piège des boites de dispersion. La boite de dispersion “a” ne contient que 4 observations ce qui peut être totalement masqué par l’utilisation de boite de dispersion. 4.4.2 Pour en savoir plus ! http://www.sthda.com/french/wiki/ggplot2-box-plot-guide-de-demarrage-rapide-logiciel-r-et-visualisation-de-donnees https://plot.ly/ggplot2/box-plots/ http://www.r-graph-gallery.com/265-grouped-boxplot-with-ggplot2/ https://chemicalstatistician.wordpress.com/2013/08/12/exploratory-data-analysis-the-5-number-summary-two-different-methods-in-r-2/ "],
["visualisation-de-multi-graphiques.html", "4.5 Visualisation de multi-graphiques", " 4.5 Visualisation de multi-graphiques Lorsque vous souhaitez représenter plusieurs graphiques sur une seule fenêtre graphique plusieurs fonctions sont à votre disposition. Il faut tout d’abord distinguer deux types de multi-graphiques. Soit il s’agit d’un seul graphique que vous souhaitez subdiviser par rapport à une ou deux variables facteurs. Soit il s’agit de graphiques indépendants que vous souhaitez représenter sur le même fenêtre graphique. Dans le premier cas, la fonction facet_grid() du package ggplot2 peut être employé. Dans le second cas, la fonction plot_grid() du package cowplot est l’une des alternatives possibles. 4.5.1 facet_grid() L’une des règles les plus importantes que vous devez impérativement garder à l’eprit lors de la réalisation de vos graphiques est la simplicité. Plus votre graphique va contenir d’information au plus il sera compliqué à être décodé par un collaborateur. Figure 4.10: Nuage de point montrant la variation de la masse de poulets au cours du temps. Le graphique ci-dessus peut par exemple être simplifié avec la fonction facet_grid(). L’information que l’on souhaite partager est la même mais les choix graphiques rendent sa lecture plus aisée. De plus, la fentre graphique a la même taille par défault que pour un seul graphique. De ce fait, réaliser de multiples graphiques peut rendre sa lecture impossible par une taille trop faible. Figure 4.11: Nuage de point montrant la variation de la masse de poulets au cours du temps en fonction de la supplémention (1-4). Vous observez que les échelles en abscisse et en ordonnée sont similaires. Cela permet une meilleure comparaison. 4.5.2 plot_grid() Figure 4.12: A) Nuage de point montrant la variation de la masse d’oursins en fonction de la taille et de leur origine. B) Nuage de point montrant la variation de la masse d’oursins en fonction de la masse des parties solides et de leur origine. 4.5.3 A vous de jouer ! Chargez le package BioDataScience + accès direct au learnR (à faire, package en cours de développement sur github) 4.5.3.1 Pour en savoir plus ! http://www.sthda.com/french/wiki/ggplot2-facet-diviser-un-graphique-en-plusieurs-panneaux-logiciel-r-et-visualisation-de-donnees http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/ http://lightonphiri.org/blog/ggplot2-multiple-plots-in-one-graph-using-gridextra https://cran.r-project.org/web/packages/cowplot/vignettes/plot_grid.html http://www.sthda.com/english/rpkgs/ggpubr/reference/ggarrange.html "],
["apercu-des-differents-systemes-graphiques.html", "4.6 Aperçu des différents systèmes graphiques", " 4.6 Aperçu des différents systèmes graphiques Depuis le début, l’ensemble des graphiques que nous vous avons proposé utilise la fonction chart() du package chart. Cependant, il ne s’agit pas du seul outil outils permettant de réaliser des graphiques dans R. Figure 4.13: Nuage de point montrant la variation de la taille en fonction du poids d’oursins et de leur origine avec le système graphique chart(). Voici d’autres alternatives que sont R de base Figure 4.14: Nuage de point montrant la variation de la taille en fonction du poids d’oursins et de leur origine avec le système graphique r de base. lattice Figure 4.15: Nuage de point montrant la variation de la taille en fonction du poids d’oursins et de leur origine avec le système graphique lattice. ggplot2 Figure 4.16: Nuage de point montrant la variation de la taille en fonction du poids d’oursins et de leur origine avec le système graphique ggplot2. Vous observez rapidement certaines similitudes entre chart, ggplot2 et lattice. En effet, la package chart a pour but premier de combiner les meilleures outils présent dans chacun des modes graphiques présentés ci-dessus. http://r4ds.had.co.nz/data-visualisation.html https://flowingdata.com/2016/03/22/comparing-ggplot2-and-r-base-graphics/ https://learnr.wordpress.com/2009/08/26/ggplot2-version-of-figures-in-lattice-multivariate-data-visualization-with-r-final-part/ https://www.statmethods.net/advgraphs/trellis.html https://www.r-bloggers.com/conditioning-and-grouping-with-lattice-graphics/ http://bl.ocks.org/patilv/raw/7360425/ http://www.sthda.com/english/wiki/scatter-plots-r-base-graphs "],
["a-vous-de-jouer-4.html", "4.7 A vous de jouer !", " 4.7 A vous de jouer ! Chargez le package BioDataScience + accès direct au learnR (à faire, package en cours de développement sur github) "],
["import.html", "Module 5 Importation/transformation des données", " Module 5 Importation/transformation des données Importation, tranformation, “cook”, dplyr, tidyr. Type de variables et façon de les représenter dans R. Expression de condition. Chemins relatifs. Challenges: faire tel type de graphe étant donné tel jeu de données (avec étape de transformation nécessaire). knitr::opts_chunk$set(echo=FALSE, results= &#39;hide&#39;, message=FALSE) SciViews::R ## ── Attaching packages ──────────────────────────────────────────────────────────────────────────────── SciViews::R 1.0.0 ── ## ✔ SciViews 1.0.0 ✔ readr 1.1.1 ## ✔ svMisc 1.1.0 ✔ tidyr 0.8.1 ## ✔ forcats 0.3.0 ✔ tibble 1.4.2 ## ✔ stringr 1.3.1 ✔ ggplot2 2.2.1 ## ✔ dplyr 0.7.5 ✔ tidyverse 1.2.1 ## ✔ purrr 0.2.5 ✔ MASS 7.3.50 ## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ✖ dplyr::select() masks MASS::select() library(knitr) library(chart) ## Le chargement a nécessité le package : lattice library(ggpubr) ## Le chargement a nécessité le package : magrittr ## ## Attachement du package : &#39;magrittr&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## set_names ## The following object is masked from &#39;package:tidyr&#39;: ## ## extract library(flow) library(data) nf &lt;- data::read(&quot;flights&quot;, package = &quot;nycflights13&quot;, lang = &quot;fr&quot;) iris &lt;- data::read(&quot;iris&quot;, package = &quot;datasets&quot;, lang = &quot;fr&quot;) #ub &lt;- data::read(&quot;urchin_bio&quot;, package = &quot;data&quot;, lang = &quot;fr&quot;) urchin &lt;- data::read(&quot;urchin_bio&quot;, package = &quot;data&quot;) Un exemple de jeu de données est présenté à la Table ??. Vos objectifs pour ce module sont : Savoir importer des données via la fonction read(), ainsi qu’appréhender ses arguments. Appréhender les type de variables et l’importance d’encoder convenablement les variables. Savoir remanier des données afin d’extraire l’information importante d’un jeu de données. "],
["prerequis-3.html", "5.1 Prérequis", " 5.1 Prérequis Si ce n’est déjà fait, vous devez avoir réaliser le module 1 ainsi que les modules liés à la visualisation des données. "],
["importation-des-donnees.html", "5.2 Importation des données", " 5.2 Importation des données Afin de réaliser l’analyse de vos résultat vous devez commencer par importer correctement vos données. Pour ce faire, la fonction pouvant vous apporter la solution est la fonction read() du package data Vos données peuvent provenir de plusieurs endroit : un package En effet, les packages que l’on peut assimiler à des boites à outils dans R sont pour certain composé de jeu de données. La fonction `read() permet de les importer. is &lt;- data::read(&quot;iris&quot;, package = &quot;datasets&quot;, lang = &quot;fr&quot;) ub &lt;- data::read(&quot;urchin_bio&quot;, package = &quot;data&quot;, lang = &quot;fr&quot;) La fonction read() requiert comme premier argument le nom du jeu de données (e.g. “iris” ou “urchin_bio”), suivi de l’argument package (e.g. “datasets”, ou “data”), suivi de l’argument lang (e.g. “fr”) qui définit la langue d’intérêt. un jeu de données encodé manuellement En effet, vous serez amené à encoder manuellement vos jeux de données dans un fichier au format “xlsx”, “csv” ou encore “txt”. La fonction read() permet de les importer. # cg &lt;- read(../data/jeu_fictif.csv) une base des données &gt; TODO ? 5.2.1 Pièges et astuces La fonction read() est également capable d’importer les fichier comprimer “.zip” , “.tar” ou encore “.tar.gz”. La fonction read() est également capable d’importer des fichiers en lignes. TODO Utiliser la fonction employer la doc de la fonction "],
["type-de-variables.html", "5.3 Type de variables", " 5.3 Type de variables Prenez l’exemple de jeu de donnée portant sur la croissance des dents de cochon d’Inde (ToothGrowth, du packagedatasets`). Il est composé de 60 observations et de trois variables portant sur la longueur des dents (mm), le supplément administré (OJ jus d’orange ou VC vitamine C) et la dose administrée ( 0.5, 1 et 2 en mm/j). Les jeux de données sont une suite de variables mises côte à côte. Vous avez à votre disposition plusieurs type de variables : nombre : numérique : numeric entiers : integer valeurs arrondies : double nombre complexe : complex Il s’agit des valeurs numériques qui vont composer vos jeux de données. Si une variable numérique ne l’est pas vous pouvez la tranformer avec l’instruction suivante : tg$len &lt;- as.numeric(tg$len) caractères : character Il s’agit de chaine de charactères qui vont composer vos jeux de données. Les chaines de caractères vont avoir 2 bu. Soit ils s’agit d’une information ayant pour objectif d’être employé comme variable facteur. Soit il s’agit d’une information complémentaire sur les observations qui ne sera pas employer dans l’analyse des données. Cependant, vous pouvez être amené à transformer une variable en caractère avec l’instruction suivante : tg$supp &lt;- as.character(tg$supp) facteur : factor Il s’agit d’une variable permettant de discriminer des observations avec un ensemble de niveau dans un jeu de données comme la variable portant sur le supplément administré ou en portant sur la dose administrée. Si une variable facteur ne l’est pas vous pouvez la tranformer avec l’instruction suivante : tg$supp &lt;- as.factor(tg$supp) Il est possible de ne pas simplement changer une variable en variable facteur. Il est possible de de préciser les niveaux levels, de l’ordonner avec l’argument ordered = TRUE. Prenez la variable dose du jeu de données ToothGrowth. Etant donné qu’il s’agit de doses croissantes administrées à des cochons d’Inde, cette variable doit donc être une variable ordonnée. tg$dose &lt;- factor(tg$dose, levels = c(0.5, 1, 2), ordered = TRUE) La fonction levels() permet de prendre connaissance des niveaux d’une variable facteur. logique : logical TODO La fonction str() permet d’obtenir un maximum d’information sur un jeu de données. str(tg) 5.3.1 Pièges et astuces Les variables d’un jeu de données doivent être correctement intégré afin d’éviter toutes mauvaises interprétations comme le montre les deux graphiques ci-dessous. Dans les graphiques a) ci-dessous, vous pouvez observer que la dose a été employé comme une variable numérique et dans le graphique b) la dose est employée comme variable facteur. Vous observez que le bon encodage de la variable dose permet d’obtenir le graphique pertinent et cohérent avec la signification des données. ## Warning: Continuous x aesthetic -- did you forget aes(group=...)? "],
["transformation-des-donnees.html", "5.4 Transformation des données", " 5.4 Transformation des données Lors du module IV, vous avez réalisé votre premier remaniement de données afin de réaliser un graphique en barre résumant une variable numérique en fonction d’une variable facteur. Le principale remaniement des données peut être réalisé en 4 grands piliers : sélectionner des colonnes au sein d’un jeu de données select() filtrer des lignes dans un jeu de données filter() calculer de nouvelles variables dans un jeu de donées mutate() Résumer de colonnes d’un jeu de données initiale summarise() 5.4.1 select() Lors de l’ut ilisation vos jeux de données, vous serez amené à réduire vos jeu de données en sous tableau. Partez du jeu de données portant sur la croissance des oursins, ce dernier contient pas moins de 19 variables étudiées sur 421 individus. Vous vous intéressez dans votre analyse uniquement à certaines variables. La fonction select() et les fonctions d’aide à la selection (?select_helpers) peut vous apporter la solution à votre demande. ub1 &lt;- select(ub, origin, solid_parts, test) ub2 &lt;- select(ub, c(1,4,14)) ub3 &lt;- select(ub, origin, contains(&quot;weight&quot;)) ub4 &lt;- select(ub, ends_with(&quot;ht&quot;)) Figure 5.1: a) Résumé de la sélection effectué ub1, b) Résumé de la sélection effectué ub2, c) Résumé de la sélection effectué ub3, d) Résumé de la sélection effectué ub4 5.4.2 filter() Lors de l’analyse de vos jeux de données, vous serez amené à filtrer les lignes de vos tableaux de données. La fonction filter() est l’un des outils pouvant vous apporter la solution. Repartez du jeu de données portant sur la croissance des oursins simplifié à 3 variables (l’origine, la hauteur et la masse du squelette). Figure 4.5: a) Nuage de points montrant la variation de la hauteur du test des oursins en fonction du poids du squelette. b) Tableau de données résumé de la croissance des oursins. Vous pouvez utiliser une variable facteur pour sélectionner uniquement un niveau. égal à : == tout sauf : != u &lt;- filter(ub2, origin != &quot;Fishery&quot;) # tous les origines sauf ceux provenant de Fishery Figure 4.7: a) Nuage de points montrant la variation de la hauteur du test des oursins en fonction du poids du squelette. b) Tableau de données résumé de la croissance des oursins suite à l’application d’un filtre sur l’orgine des oursins. Vous pouvez utiliser une variable numérique pour filtrer les données. supérieur à : &gt; inférieur à : &lt; supérieur ou égal à : &gt;= inférieur ou égal à : &lt;= Figure 4.9: a) Nuage de points montrant la variation de la hauteur du test des oursins en fonction du poids du squelette. b) Tableau de données résumé de la croissance des oursins suite à l’application d’un filtre sur les tailles des individus. Vous pouvez combiner différents filtres : &amp; : et : ou Figure 4.11: a) Nuage de points montrant la variation de la hauteur du test des oursins en fonction du poids du squelette. b) Tableau de données résumé de la croissance des oursins suite à l’application d’un filtre sur l’orgine des oursins et sur les tailles des individus. 5.4.2.1 Pièges et astuces Avec des variables facteurs composé des nombreux niveaux, on peut être amené à en sélectionné plusieurs is &lt;- filter(iris, Species == &quot;virginica&quot;| &quot;setosa&quot;) ## erreur is &lt;- filter(iris, Species %in% c(&quot;setosa&quot;, &quot;virginica&quot;)) 5.4.3 mutate() Lors de l’analyse de vos jeux de données, vous serez amené à calculer de nouvelles variables. La fonction mutate() est l’un des outils pouvant vous apporter la solution. Repartez du jeu de données portant sur la croisance des oursins. Vous pouvez tout d’abord employer les - les opérateurs arithmétiques + addition : + + soustraction : - + multiplication : * + division : / + exposant : ^ ou ** + modulo (reste lors d’une division) : %% + division entière : %/% ub &lt;- mutate(ub, v1 = lantern + spines + test, v2 = v1/skeleton, v3 = skeleton^2) les fonctions mathématiques log sqrt sin, cos, tan ub &lt;- mutate(ub, v1_log = log(skeleton), v2_sqrt = sqrt(skeleton), v3_sin = sin(skeleton)) 5.4.3.1 Pièges et astuces La fonction mutate() permet de calculer de nouvelles variables. Cependant, la fonction transmute() permet de retirer les anciennes variables employées dans le calcule de la nouvelle. 5.4.4 summarise() Lors de l’analyse de vos jeux de données, vous serez amené à résumer vos données. Cette fonction n’a de véritable intêrét que couplée avec la fonction `group_by() qui va permettre de grouper un jeu de données en fonction d’une ou plusieurs variable de type facteur. 5.4.4.1 Pièges et astuces Tout comme lors de réalisation d’une boite de dispersion, vous devez être particulièrement vigilant ou nombre d’observation par sous groupe. Ajoutez à chaque tableau résumé des données, le nombre d’observation par sous-groupe. 5.4.5 Pièges et astuces Lors de l’analyse de vos jeux de données, vous serez amené à réaliser plusieurs de ces étapes de remaniement des données. La solution est d’employer le pipe10 `%&gt;.% qui permet de réaliser une suite d’intructions. ub &lt;- mutate(ub, v1 = lantern + spines + test, v2 = v1/skeleton, v3 = skeleton^2) ub &lt;- mutate(ub, v1_log = log(skeleton), v2_sqrt = sqrt(skeleton), v3_sin = sin(skeleton)) ub &lt;- filter(ub, height &gt; 20 &amp; origin == &quot;Farm&quot;) ub &lt;- select(ub, origin, solid_parts, test, v2_sqrt) ub1 %&gt;.% mutate(., v1 = lantern + spines + test, v2 = v1/skeleton, v3 = skeleton^2, v1_log = log(skeleton), v2_sqrt = sqrt(skeleton), v3_sin = sin(skeleton)) %&gt;.% filter(., height &gt; 20 &amp; origin == &quot;Farm&quot;) %&gt;.% select(., origin, solid_parts, test, v2_sqrt) -&gt; ub1 TODO↩ "],
["qualit.html", "Module 6 Données qualitatives", " Module 6 Données qualitatives Variables de type factor/ordered, transformation, découpage en classes, tableau de contigence. Choix des variables à mesurer, biométrie humaine. "],
["proba.html", "Module 7 Probabilités &amp; distributions", " Module 7 Probabilités &amp; distributions On part du paradoxe bayésien (effet d’un test de dépistage en fonction de la prévalence d’une maladie) -&gt; probabilités et calculs de probabilités. Généralisation = lois de distributions. Distributions discrètes et continues. Principales lois de distributions et utilisation en pratique. Evaluation par les pairs d’un rapport réalisé jusqu’ici. "],
["chi2.html", "Module 8 Test Chi carré", " Module 8 Test Chi carré Restitution globale concernant l’évaluation de rapports par les pairs. Test de Chi2, et application sur base d’une courte manip réalisée par les étudiants (par exemple, sur des coraux). "],
["moyenne.html", "Module 9 Moyenne", " Module 9 Moyenne Moyenne, intervalle de confiance et t-test. Présentation graphique: dynamite plot + barres d’erreurs. Transformation des données pour linéariser et ou rendre symétrique autour de la moyenne. Comparaison moyenne/médiane =&gt; paramétrique versus non paramétrique. Exemple d’équation avec référence, voir éq. (9.1): \\[\\begin{equation} \\mu=\\sum_{i=1}^n{\\frac{x_i}{n}} \\tag{9.1} \\end{equation}\\] L’équation suivante n’est pas libellée: \\[\\begin{equation*} \\mu=\\frac{\\sum_{i=1}^nx_i}{n} \\end{equation*}\\] "],
["variance.html", "Module 10 Variance", " Module 10 Variance Comparaison de deux populations (suite): Wilcoxon-Mann-Withney + comparaison au t-test. Variance, ANOVAs, test de Bartlett. Graphiques associés. Petite recherche biblio concernant l’application en pratique de ces tests à faire par les étudiants. "],
["correlation.html", "Module 11 Corrélation", " Module 11 Corrélation Suite ANOVA (ANOVA à deux facteurs) + correlation + graphes et tests. Restitution participation à l’élaboration du bookdown commun. "],
["design.html", "Module 12 Design expérimental &amp; critique statistique", " Module 12 Design expérimental &amp; critique statistique Design de l’expérience, choix du nombre de réplicas et puissance d’un test. Critique stat + “bad graphs” + pseudo-réplication. “Challenges” sur base de la critique statistique. Débriefing général. "],
["svbox.html", "A Installation de la SciViews Box", " A Installation de la SciViews Box A faire… "],
["references.html", "Références", " Références "]
]
